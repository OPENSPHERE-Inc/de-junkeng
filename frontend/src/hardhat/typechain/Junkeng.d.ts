/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface JunkengInterface extends ethers.utils.Interface {
  functions: {
    "disclose(uint8)": FunctionFragment;
    "getCoinBalance(uint256)": FunctionFragment;
    "getOpponentStatus()": FunctionFragment;
    "getStatus()": FunctionFragment;
    "join()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "disclose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoinBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpponentStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "disclose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpponentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Disclosed(address,uint256)": EventFragment;
    "Earned(address,uint256,uint256)": EventFragment;
    "Established(address,uint256,address,uint256,uint256)": EventFragment;
    "Joined(address,uint256)": EventFragment;
    "Settled(address,uint256,uint8,address,uint256,uint8)": EventFragment;
    "Withdrew(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Disclosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Earned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Established"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export class Junkeng extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: JunkengInterface;

  functions: {
    disclose(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disclose(uint8)"(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCoinBalance(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coins: BigNumber;
      0: BigNumber;
    }>;

    "getCoinBalance(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coins: BigNumber;
      0: BigNumber;
    }>;

    getOpponentStatus(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    "getOpponentStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    getStatus(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    "getStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    join(overrides?: Overrides): Promise<ContractTransaction>;

    "join()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  disclose(
    _handShape: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disclose(uint8)"(
    _handShape: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCoinBalance(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCoinBalance(uint256)"(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpponentStatus(
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    index: BigNumber;
    status: number;
    timestamp: BigNumber;
    handShape: number;
    streak: BigNumber;
    phase: BigNumber;
    0: string;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
  }>;

  "getOpponentStatus()"(
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    index: BigNumber;
    status: number;
    timestamp: BigNumber;
    handShape: number;
    streak: BigNumber;
    phase: BigNumber;
    0: string;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
  }>;

  getStatus(
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    index: BigNumber;
    status: number;
    timestamp: BigNumber;
    handShape: number;
    streak: BigNumber;
    phase: BigNumber;
    0: string;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
  }>;

  "getStatus()"(
    overrides?: CallOverrides
  ): Promise<{
    addr: string;
    index: BigNumber;
    status: number;
    timestamp: BigNumber;
    handShape: number;
    streak: BigNumber;
    phase: BigNumber;
    0: string;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: number;
    5: BigNumber;
    6: BigNumber;
  }>;

  join(overrides?: Overrides): Promise<ContractTransaction>;

  "join()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    disclose(
      _handShape: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "disclose(uint8)"(
      _handShape: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCoinBalance(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCoinBalance(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpponentStatus(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    "getOpponentStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    getStatus(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    "getStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      index: BigNumber;
      status: number;
      timestamp: BigNumber;
      handShape: number;
      streak: BigNumber;
      phase: BigNumber;
      0: string;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: number;
      5: BigNumber;
      6: BigNumber;
    }>;

    join(overrides?: CallOverrides): Promise<void>;

    "join()"(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Disclosed(addr: null, index: null): EventFilter;

    Earned(addr: null, index: null, amount: null): EventFilter;

    Established(
      a: null,
      a_index: null,
      b: null,
      b_index: null,
      timestamp: null
    ): EventFilter;

    Joined(addr: null, index: null): EventFilter;

    Settled(
      a: null,
      a_index: null,
      a_handShape: null,
      b: null,
      b_index: null,
      b_handShape: null
    ): EventFilter;

    Withdrew(addr: null, amount: null): EventFilter;
  };

  estimateGas: {
    disclose(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disclose(uint8)"(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCoinBalance(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCoinBalance(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpponentStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpponentStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    join(overrides?: Overrides): Promise<BigNumber>;

    "join()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    disclose(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disclose(uint8)"(
      _handShape: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCoinBalance(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCoinBalance(uint256)"(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpponentStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOpponentStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(overrides?: Overrides): Promise<PopulatedTransaction>;

    "join()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
