{
  "language": "Solidity",
  "sources": {
    "contracts/JunkCoinDepositedERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport { JunkCoinERC20 } from \"./JunkCoinERC20.sol\";\r\nimport { Abs_L2DepositedToken } from \"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L2DepositedToken.sol\";\r\n\r\n/**\r\n * Runtime target: OVM\r\n */\r\ncontract JunkCoinDepositedERC20 is Abs_L2DepositedToken, JunkCoinERC20 {\r\n\r\n    constructor(\r\n        address _l2CrossDomainMessenger,\r\n        string memory _name,\r\n        string memory _symbol\r\n    )\r\n        Abs_L2DepositedToken(_l2CrossDomainMessenger)\r\n        JunkCoinERC20(_name, _symbol, 0)\r\n    {}\r\n\r\n    function _handleInitiateWithdrawal(\r\n        address _to,\r\n        uint _amount\r\n    )\r\n        internal\r\n        override\r\n    {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function _handleFinalizeDeposit(\r\n        address _to,\r\n        uint _amount\r\n    )\r\n        internal\r\n        override\r\n    {\r\n        _mint(_to, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/JunkCoinERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\n/**\r\n * Runtime target: EVM\r\n */\r\ncontract JunkCoinERC20 is ERC20 {\r\n\r\n    constructor(string memory _name, string memory _symbol, uint _initialSupplies) ERC20(_name, _symbol) {\r\n        _mint(msg.sender, _initialSupplies);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L2DepositedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/* Interface Imports */\nimport { iOVM_L2DepositedToken } from \"../../../iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\";\nimport { iOVM_L1TokenGateway } from \"../../../iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\";\n\n/* Library Imports */\nimport { OVM_CrossDomainEnabled } from \"../../../libraries/bridge/OVM_CrossDomainEnabled.sol\";\n\n/**\n * @title Abs_L2DepositedToken\n * @dev An L2 Deposited Token is an L2 representation of funds which were deposited from L1.\n * Usually contract mints new tokens when it hears about deposits into the L1 ERC20 gateway.\n * This contract also burns the tokens intended for withdrawal, informing the L1 gateway to release L1 funds.\n *\n * NOTE: This abstract contract gives all the core functionality of a deposited token implementation except for the\n * token's internal accounting itself.  This gives developers an easy way to implement children with their own token code.\n *\n * Compiler used: optimistic-solc\n * Runtime target: OVM\n */\nabstract contract Abs_L2DepositedToken is iOVM_L2DepositedToken, OVM_CrossDomainEnabled {\n\n    /*******************\n     * Contract Events *\n     *******************/\n\n    event Initialized(iOVM_L1TokenGateway _l1TokenGateway);\n\n    /********************************\n     * External Contract References *\n     ********************************/\n\n    iOVM_L1TokenGateway public l1TokenGateway;\n\n    /********************************\n     * Constructor & Initialization *\n     ********************************/\n\n    /**\n     * @param _l2CrossDomainMessenger L1 Messenger address being used for cross-chain communications.\n     */\n    constructor(\n        address _l2CrossDomainMessenger\n    )\n        OVM_CrossDomainEnabled(_l2CrossDomainMessenger)\n    {}\n\n    /**\n     * @dev Initialize this contract with the L1 token gateway address.\n     * The flow: 1) this contract gets deployed on L2, 2) the L1\n     * gateway is deployed with addr from (1), 3) L1 gateway address passed here.\n     *\n     * @param _l1TokenGateway Address of the corresponding L1 gateway deployed to the main chain\n     */\n\n    function init(\n        iOVM_L1TokenGateway _l1TokenGateway\n    )\n        public\n    {\n        require(address(l1TokenGateway) == address(0), \"Contract has already been initialized\");\n\n        l1TokenGateway = _l1TokenGateway;\n        \n        emit Initialized(l1TokenGateway);\n    }\n\n    /**********************\n     * Function Modifiers *\n     **********************/\n\n    modifier onlyInitialized() {\n        require(address(l1TokenGateway) != address(0), \"Contract has not yet been initialized\");\n        _;\n    }\n\n    /********************************\n     * Overridable Accounting logic *\n     ********************************/\n\n    // Default gas value which can be overridden if more complex logic runs on L2.\n    uint32 constant DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS = 100000;\n\n    /**\n     * @dev Core logic to be performed when a withdrawal from L2 is initialized.\n     * In most cases, this will simply burn the withdrawn L2 funds.\n     *\n     * @param _to Address being withdrawn to\n     * @param _amount Amount being withdrawn\n     */\n\n    function _handleInitiateWithdrawal(\n        address _to,\n        uint _amount\n    )\n        internal\n        virtual\n    {\n        revert(\"Accounting must be implemented by child contract.\");\n    }\n\n    /**\n     * @dev Core logic to be performed when a deposit from L2 is finalized on L2.\n     * In most cases, this will simply _mint() to credit L2 funds to the recipient.\n     *\n     * @param _to Address being deposited to on L2\n     * @param _amount Amount which was deposited on L1\n     */\n    function _handleFinalizeDeposit(\n        address _to,\n        uint _amount\n    )\n        internal\n        virtual\n    {\n        revert(\"Accounting must be implemented by child contract.\");\n    }\n\n    /**\n     * @dev Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be\n     * dynamic, and the above public constant does not suffice.\n     *\n     */\n\n    function getFinalizeWithdrawalL1Gas()\n        public\n        view\n        virtual\n        returns(\n            uint32\n        )\n    {\n        return DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS;\n    }\n\n\n    /***************\n     * Withdrawing *\n     ***************/\n\n    /**\n     * @dev initiate a withdraw of some tokens to the caller's account on L1\n     * @param _amount Amount of the token to withdraw\n     */\n    function withdraw(\n        uint _amount\n    )\n        external\n        override\n        onlyInitialized()\n    {\n        _initiateWithdrawal(msg.sender, _amount);\n    }\n\n    /**\n     * @dev initiate a withdraw of some token to a recipient's account on L1\n     * @param _to L1 adress to credit the withdrawal to\n     * @param _amount Amount of the token to withdraw\n     */\n    function withdrawTo(\n        address _to,\n        uint _amount\n    )\n        external\n        override\n        onlyInitialized()\n    {\n        _initiateWithdrawal(_to, _amount);\n    }\n\n    /**\n     * @dev Performs the logic for deposits by storing the token and informing the L2 token Gateway of the deposit.\n     *\n     * @param _to Account to give the withdrawal to on L1\n     * @param _amount Amount of the token to withdraw\n     */\n    function _initiateWithdrawal(\n        address _to,\n        uint _amount\n    )\n        internal\n    {\n        // Call our withdrawal accounting handler implemented by child contracts (usually a _burn)\n        _handleInitiateWithdrawal(_to, _amount);\n\n        // Construct calldata for l1TokenGateway.finalizeWithdrawal(_to, _amount)\n        bytes memory data = abi.encodeWithSelector(\n            iOVM_L1TokenGateway.finalizeWithdrawal.selector,\n            _to,\n            _amount\n        );\n\n        // Send message up to L1 gateway\n        sendCrossDomainMessage(\n            address(l1TokenGateway),\n            data,\n            getFinalizeWithdrawalL1Gas()\n        );\n\n        emit WithdrawalInitiated(msg.sender, _to, _amount);\n    }\n\n    /************************************\n     * Cross-chain Function: Depositing *\n     ************************************/\n\n    /**\n     * @dev Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this \n     * L2 token. \n     * This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. \n     *\n     * @param _to Address to receive the withdrawal at\n     * @param _amount Amount of the token to withdraw\n     */\n    function finalizeDeposit(\n        address _to,\n        uint _amount\n    )\n        external\n        override \n        onlyInitialized()\n        onlyFromCrossDomainAccount(address(l1TokenGateway))\n    {\n        _handleFinalizeDeposit(_to, _amount);\n        emit DepositFinalized(_to, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_L2DepositedToken\n */\ninterface iOVM_L2DepositedToken {\n\n    /**********\n     * Events *\n     **********/\n\n    event WithdrawalInitiated(\n        address indexed _from,\n        address _to,\n        uint256 _amount\n    );\n\n    event DepositFinalized(\n        address indexed _to,\n        uint256 _amount\n    );    \n\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    function withdraw(\n        uint _amount\n    )\n        external;\n\n    function withdrawTo(\n        address _to,\n        uint _amount\n    )\n        external;\n\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    function finalizeDeposit(\n        address _to,\n        uint _amount\n    )\n        external;\n}\n"
    },
    "@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_L1TokenGateway\n */\ninterface iOVM_L1TokenGateway {\n\n    /**********\n     * Events *\n     **********/\n\n    event DepositInitiated(\n        address indexed _from,\n        address _to,\n        uint256 _amount\n    );\n  \n    event WithdrawalFinalized(\n        address indexed _to,\n        uint256 _amount\n    );\n\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    function deposit(\n        uint _amount\n    )\n        external;\n\n    function depositTo(\n        address _to,\n        uint _amount\n    )\n        external;\n\n\n    /*************************\n     * Cross-chain Functions *\n     *************************/\n\n    function finalizeWithdrawal(\n        address _to,\n        uint _amount\n    )\n        external;\n}\n"
    },
    "@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\n/* Interface Imports */\nimport { iAbs_BaseCrossDomainMessenger } from \"../../iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\";\n\n/**\n * @title OVM_CrossDomainEnabled\n * @dev Helper contract for contracts performing cross-domain communications\n *\n * Compiler used: defined by inheriting contract\n * Runtime target: defined by inheriting contract\n */\ncontract OVM_CrossDomainEnabled {\n    // Messenger contract used to send and recieve messages from the other domain.\n    address public messenger;\n\n    /***************\n     * Constructor *\n     ***************/    \n    constructor(\n        address _messenger\n    ) {\n        messenger = _messenger;\n    }\n\n    /**********************\n     * Function Modifiers *\n     **********************/\n\n    /**\n     * @notice Enforces that the modified function is only callable by a specific cross-domain account.\n     * @param _sourceDomainAccount The only account on the originating domain which is authenticated to call this function.\n     */\n    modifier onlyFromCrossDomainAccount(\n        address _sourceDomainAccount\n    ) {\n        require(\n            msg.sender == address(getCrossDomainMessenger()),\n            \"OVM_XCHAIN: messenger contract unauthenticated\"\n        );\n\n        require(\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\n            \"OVM_XCHAIN: wrong sender of cross-domain message\"\n        );\n\n        _;\n    }\n    \n    /**********************\n     * Internal Functions *\n     **********************/\n\n    /**\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\n     * @return The address of the cross-domain messenger contract which should be used. \n     */\n    function getCrossDomainMessenger()\n        internal\n        virtual\n        returns(\n            iAbs_BaseCrossDomainMessenger\n        )\n    {\n        return iAbs_BaseCrossDomainMessenger(messenger);\n    }\n\n    /**\n     * @notice Sends a message to an account on another domain\n     * @param _crossDomainTarget The intended recipient on the destination domain\n     * @param _data The data to send to the target (usually calldata to a function with `onlyFromCrossDomainAccount()`)\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\n     */\n    function sendCrossDomainMessage(\n        address _crossDomainTarget,\n        bytes memory _data,\n        uint32 _gasLimit\n    ) internal {\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _data, _gasLimit);\n    }\n}\n"
    },
    "@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.8.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iAbs_BaseCrossDomainMessenger\n */\ninterface iAbs_BaseCrossDomainMessenger {\n\n    /**********\n     * Events *\n     **********/\n    event SentMessage(bytes message);\n    event RelayedMessage(bytes32 msgHash);\n\n    /**********************\n     * Contract Variables *\n     **********************/\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n"
    },
    "contracts/Junkeng.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\ncontract Junkeng {\r\n    enum ParticipantStatus {\r\n        NoRegistration,\r\n        NoParticipating,\r\n        Participated\r\n    }\r\n\r\n    enum MatchStatus {\r\n        NoParticipating,\r\n        Participated,\r\n        Disclosed,\r\n        Settled\r\n    }\r\n\r\n    enum HandShape {\r\n        Undefined,\r\n        Guu,\r\n        Choki,\r\n        Paa\r\n    }\r\n\r\n    struct ParticipantContext {\r\n        uint current;  // Current index of queue\r\n        ParticipantStatus status;\r\n        uint streak;  // Win streak\r\n        uint phase;  // Increment every transaction. This helps frontend status transition\r\n    }\r\n\r\n    struct Queue {\r\n        address addr;\r\n        HandShape handShape;\r\n        uint timestamp;  // block.timestamp\r\n        MatchStatus status;\r\n    }\r\n\r\n    address private admin;\r\n    address private coin;\r\n\r\n    // Match context\r\n    Queue[] private queue;\r\n    mapping (address => ParticipantContext) private participants;\r\n\r\n    // User's asset\r\n    mapping (address => uint) private coinStock;\r\n\r\n    /**\r\n     * Emit when participant joined.\r\n     */\r\n    event Joined(address addr, uint index);\r\n\r\n    /**\r\n     * Emit when the match has been established.\r\n     */\r\n    event Established(address a, uint a_index, address b, uint b_index, uint timestamp);\r\n\r\n    /**\r\n     * Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)\r\n     */\r\n    event Disclosed(address addr, uint index);\r\n\r\n    /**\r\n     * Emit when each participants disclosed their hand shape.\r\n     */\r\n    event Settled(address a, uint a_index, uint8 a_handShape, address b, uint b_index, uint8 b_handShape);\r\n\r\n    /**\r\n     * Emit when awarded JunkCoin to winner\r\n     */\r\n    event Earned(address addr, uint index, uint amount);\r\n\r\n    /**\r\n     * Emit when withdrew JunkCoin\r\n     */\r\n    event Withdrew(address addr, uint amount);\r\n\r\n    /**\r\n     * Sender is registered\r\n     */\r\n    modifier registered() {\r\n        require(participants[msg.sender].status > ParticipantStatus.NoRegistration, \"No registration\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sender is participant\r\n     */\r\n    modifier participating() {\r\n        require(participants[msg.sender].status > ParticipantStatus.NoParticipating, \"Not participants\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Sender is non participant\r\n     */\r\n    modifier notParticipating() {\r\n        require(participants[msg.sender].status <= ParticipantStatus.NoParticipating, \"Already participated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Calc opponent index\r\n     */\r\n    function calcOpponentIndex(uint _index) pure private returns(uint) {\r\n        return (_index & ~uint(1)) + ((_index + 1) & uint(1));\r\n    }\r\n\r\n    /**\r\n     * Get opponent index\r\n     * Require exists\r\n     */\r\n    function getOpponent(uint _index) view private returns(uint) {\r\n        // Even vs Odd\r\n        uint opponent = calcOpponentIndex(_index);\r\n\r\n        require(opponent < queue.length, \"Opponent not ready\");\r\n\r\n        return opponent;\r\n    }\r\n\r\n    /**\r\n     * Get maximum of a and b\r\n     */\r\n    function bigger(uint _a, uint _b) pure private returns(uint) {\r\n        return (_a > _b) ? _a : _b;\r\n    }\r\n\r\n    /**\r\n     * Calculate duration from latest timestamp\r\n     */\r\n    function calcDuration(uint _a, uint _b) view private returns(uint) {\r\n        return block.timestamp - bigger(_a, _b);\r\n    }\r\n\r\n    /**\r\n     * Expire at 5 minutes after the match was established.\r\n     */\r\n    modifier timeout() {\r\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\r\n            uint index = participants[msg.sender].current;\r\n            uint opponent = calcOpponentIndex(index);\r\n\r\n            if (opponent < queue.length) {\r\n                // Keep deadline\r\n                uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\r\n\r\n                if (duration > 5 minutes) {\r\n                    // Timeout -> Reset\r\n                    participants[msg.sender].status = ParticipantStatus.NoParticipating;\r\n\r\n                    if (queue[index].handShape != HandShape.Undefined && queue[opponent].handShape == HandShape.Undefined) {\r\n                        // Opponent timeout -> DEFWIN\r\n                        // Get coin\r\n                        coinStock[msg.sender] += ++participants[msg.sender].streak;\r\n\r\n                        emit Earned(msg.sender, index, participants[msg.sender].streak);\r\n                    } else {\r\n                        // Self timeout or both timeout -> DEFLOSS\r\n                        participants[msg.sender].streak = 0;\r\n                    }\r\n\r\n                    queue[index].status = MatchStatus.Settled;\r\n                }\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Some coins have been stocked\r\n     */\r\n    modifier haveCoins() {\r\n        require(coinStock[msg.sender] > 0, \"No coins\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Advance phase value after the transaction process\r\n     */\r\n    modifier phaseAdvance() {\r\n        _;\r\n        participants[msg.sender].phase++;\r\n    }\r\n\r\n    /**\r\n     * Settle match result\r\n     * result: 0 draw, 1 win, -1 lose\r\n     */\r\n    function settle(uint _index, uint _opponent) view private returns(int8) {\r\n        // FIXME: Constants of non-value type not yet implemented on solidity 0.7.x\r\n        int8[4][4] memory lookupTable = [\r\n            [int8(0), int8(-1), int8(-1), int8(-1)],\r\n            [int8(1), int8( 0), int8( 1), int8(-1)],\r\n            [int8(1), int8(-1), int8( 0), int8( 1)],\r\n            [int8(1), int8( 1), int8(-1), int8( 0)]\r\n        ];\r\n        return lookupTable[uint8(queue[_index].handShape)][uint8(queue[_opponent].handShape)];\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * Obtain JunkCoin address from args\r\n     * Obtain admin address from msg.sender\r\n     */\r\n    constructor(address _coin) {\r\n        coin = _coin;\r\n        admin = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Join match queue\r\n     */\r\n    function join() public timeout notParticipating phaseAdvance {\r\n        uint index = queue.length;\r\n\r\n        queue.push(Queue({\r\n            addr: msg.sender,\r\n            handShape: HandShape.Undefined,\r\n            timestamp: block.timestamp,\r\n            status: MatchStatus.Participated\r\n        }));\r\n\r\n        if (participants[msg.sender].status == ParticipantStatus.NoRegistration) {\r\n            // New registration\r\n            participants[msg.sender] = ParticipantContext({\r\n                current: index,\r\n                status: ParticipantStatus.Participated,\r\n                streak: 0,\r\n                phase: 0\r\n            });\r\n        } else {\r\n            // Continuous\r\n            participants[msg.sender].current = index;\r\n            participants[msg.sender].status = ParticipantStatus.Participated;\r\n        }\r\n\r\n        emit Joined(msg.sender, index);\r\n\r\n        if (index % 2 == 1) {\r\n            // Establish match when index is odd.\r\n            uint timestamp = bigger(queue[index - 1].timestamp, queue[index].timestamp);\r\n            emit Established(queue[index - 1].addr, index - 1, queue[index].addr, index, timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disclose hand shape each other.\r\n     * _handShape: 1 Guu, 2 Choki, 3 Paa\r\n     */\r\n    function disclose(uint8 _handShape) public participating phaseAdvance {\r\n        uint index = participants[msg.sender].current;\r\n        uint opponent = getOpponent(index);\r\n        address opponentAddr = queue[opponent].addr;\r\n\r\n        require(queue[index].status == MatchStatus.Participated, \"Already disclosed\" );\r\n        require(_handShape >= 1 && _handShape <= 3, \"Invalid hand shape\");\r\n\r\n        // Keep deadline\r\n        uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\r\n\r\n        if (duration > 5 minutes) {\r\n            // Timeout -> Lost or Draw(if opponent timeout too)\r\n            queue[index].handShape = HandShape.Undefined;\r\n        } else {\r\n            queue[index].handShape = HandShape(_handShape);\r\n        }\r\n\r\n        queue[index].status = MatchStatus.Disclosed;\r\n        emit Disclosed(msg.sender, index);\r\n\r\n        if (queue[opponent].status == MatchStatus.Disclosed) {\r\n            emit Settled(\r\n                msg.sender,\r\n                index,\r\n                uint8(queue[index].handShape),\r\n                opponentAddr,\r\n                opponent,\r\n                uint8(queue[opponent].handShape)\r\n            );\r\n\r\n            // Settlement\r\n            int8 result = settle(index, opponent);\r\n\r\n            if (result == 1) {\r\n                // Won -> Get coin\r\n                coinStock[msg.sender] += ++participants[msg.sender].streak;\r\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\r\n                // Reset opponent status for next join\r\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\r\n                participants[opponentAddr].streak = 0;\r\n\r\n                emit Earned(msg.sender, index, participants[msg.sender].streak);\r\n\r\n            } else if (result == -1) {\r\n                // Lost -> The coin is taken by opponent\r\n                coinStock[opponentAddr] += ++participants[opponentAddr].streak;\r\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\r\n                // Reset own status for next join\r\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\r\n                participants[msg.sender].streak = 0;\r\n\r\n                emit Earned(opponentAddr, opponent, participants[opponentAddr].streak);\r\n\r\n            } else {\r\n                // Draw -> No one get coin\r\n                // Reset both status for next join\r\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\r\n                participants[msg.sender].streak = 0;\r\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\r\n                participants[opponentAddr].streak = 0;\r\n            }\r\n\r\n            queue[index].status = MatchStatus.Settled;\r\n            queue[opponent].status = MatchStatus.Settled;\r\n            participants[opponentAddr].phase++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Withdraw JunkCoin\r\n     */\r\n    function withdraw() public timeout haveCoins phaseAdvance {\r\n        uint amount = coinStock[msg.sender];\r\n        coinStock[msg.sender] = 0;\r\n        IERC20(coin).transferFrom(admin, msg.sender, amount);\r\n\r\n        emit Withdrew(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * Get own status\r\n     */\r\n    function getStatus() view public registered\r\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\r\n    {\r\n        addr = msg.sender;\r\n        index = participants[msg.sender].current;\r\n        status = uint8(queue[index].status);\r\n        timestamp = queue[index].timestamp;\r\n        handShape = uint8(queue[index].handShape);\r\n        streak = participants[msg.sender].streak;\r\n        phase = participants[msg.sender].phase;\r\n    }\r\n\r\n    /**\r\n     * Get own coin balance\r\n     * This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args.\r\n     */\r\n    function getCoinBalance(uint timestamp) view public returns(uint coins) {\r\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\r\n            // Keep deadline\r\n            uint index = participants[msg.sender].current;\r\n\r\n            if (queue[index].status == MatchStatus.Disclosed) {\r\n                // No settled yet\r\n                uint opponent = getOpponent(index);\r\n                uint duration = timestamp - bigger(queue[index].timestamp, queue[opponent].timestamp);\r\n\r\n                if (duration > 5 minutes &&\r\n                    queue[index].handShape != HandShape.Undefined &&\r\n                    queue[opponent].handShape == HandShape.Undefined)\r\n                {\r\n                    // DEFWIN previous match, add (streak + 1) coins to balance\r\n                    coins += participants[msg.sender].streak + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        coins += coinStock[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * Get opponent status\r\n     */\r\n    function getOpponentStatus() view public registered\r\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\r\n    {\r\n        uint  self = participants[msg.sender].current;\r\n\r\n        index = getOpponent(self);\r\n        addr = queue[index].addr;\r\n        status = uint8(queue[index].status);\r\n        timestamp = queue[index].timestamp;\r\n        streak = participants[queue[index].addr].streak;\r\n        phase = participants[queue[index].addr].phase;\r\n\r\n        // You can obtain opponent hand shape when disclosed own hand shape\r\n        handShape = uint8((queue[self].status >= MatchStatus.Disclosed) ? queue[index].handShape : HandShape.Undefined);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}