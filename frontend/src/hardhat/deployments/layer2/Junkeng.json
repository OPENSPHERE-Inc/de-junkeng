{
  "address": "0x3C67B82D67B4f31A54C0A516dE8d3e93D010EDb3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Disclosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Earned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "a_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "b",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "b_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Established",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "a_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "a_handShape",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "b",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "b_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "b_handShape",
          "type": "uint8"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_handShape",
          "type": "uint8"
        }
      ],
      "name": "disclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getCoinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coins",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpponentStatus",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "handShape",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "streak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "handShape",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "streak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb56f117b45199a72651d7bd1fd6c984c4114903f3607d63ffccda6ac4021ac74",
  "receipt": {
    "to": null,
    "from": "0x9858effd232b4033e47d90003d41ec34ecaeda94",
    "contractAddress": "0xc5273abfb36550090095b1edec019216ad21be6c",
    "transactionIndex": "0x0",
    "gasUsed": "0x16e360",
    "logsBloom": "0x
    "blockHash": "0x251ae76003f6117170b8d54acc9d580b97277c5ee8f53fc9e73f93edfd553efc",
    "transactionHash": "0xb56f117b45199a72651d7bd1fd6c984c4114903f3607d63ffccda6ac4021ac74",
    "logs": [],
    "blockNumber": "0x2",
    "cumulativeGasUsed": "0x16e360",
    "status": "0x0"
  },
  "args": [
    "0xc5273abfb36550090095b1edec019216ad21be6c"
  ],
  "solcInputHash": "651826c5571b9d32e3bb0531c78af9e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.c88bc4b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Disclosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Earned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Established\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"a_handShape\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"b_handShape\",\"type\":\"uint8\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_handShape\",\"type\":\"uint8\"}],\"name\":\"disclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getCoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpponentStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"handShape\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"handShape\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Disclosed(address,uint256)\":{\"notice\":\"Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)\"},\"Earned(address,uint256,uint256)\":{\"notice\":\"Emit when awarded JunkCoin to winner\"},\"Established(address,uint256,address,uint256,uint256)\":{\"notice\":\"Emit when the match has been established.\"},\"Joined(address,uint256)\":{\"notice\":\"Emit when participant joined.\"},\"Settled(address,uint256,uint8,address,uint256,uint8)\":{\"notice\":\"Emit when each participants disclosed their hand shape.\"},\"Withdrew(address,uint256)\":{\"notice\":\"Emit when withdrew JunkCoin\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor Obtain JunkCoin address from args Obtain admin address from msg.sender\"},\"disclose(uint8)\":{\"notice\":\"Disclose hand shape each other. _handShape: 1 Guu, 2 Choki, 3 Paa\"},\"getCoinBalance(uint256)\":{\"notice\":\"Get own coin balance This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args.\"},\"getOpponentStatus()\":{\"notice\":\"Get opponent status\"},\"getStatus()\":{\"notice\":\"Get own status\"},\"join()\":{\"notice\":\"Join match queue\"},\"withdraw()\":{\"notice\":\"Withdraw JunkCoin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Junkeng.sol\":\"Junkeng\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Junkeng.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract Junkeng {\\r\\n    enum ParticipantStatus {\\r\\n        NoRegistration,\\r\\n        NoParticipating,\\r\\n        Participated\\r\\n    }\\r\\n\\r\\n    enum MatchStatus {\\r\\n        NoParticipating,\\r\\n        Participated,\\r\\n        Disclosed,\\r\\n        Settled\\r\\n    }\\r\\n\\r\\n    enum HandShape {\\r\\n        Undefined,\\r\\n        Guu,\\r\\n        Choki,\\r\\n        Paa\\r\\n    }\\r\\n\\r\\n    struct ParticipantContext {\\r\\n        uint current;  // Current index of queue\\r\\n        ParticipantStatus status;\\r\\n        uint streak;  // Win streak\\r\\n        uint phase;  // Increment every transaction. This helps frontend status transition\\r\\n    }\\r\\n\\r\\n    struct Queue {\\r\\n        address addr;\\r\\n        HandShape handShape;\\r\\n        uint timestamp;  // block.timestamp\\r\\n        MatchStatus status;\\r\\n    }\\r\\n\\r\\n    address private admin;\\r\\n    address private coin;\\r\\n\\r\\n    // Match context\\r\\n    Queue[] private queue;\\r\\n    mapping (address => ParticipantContext) private participants;\\r\\n\\r\\n    // User's asset\\r\\n    mapping (address => uint) private coinStock;\\r\\n\\r\\n    /**\\r\\n     * Emit when participant joined.\\r\\n     */\\r\\n    event Joined(address addr, uint index);\\r\\n\\r\\n    /**\\r\\n     * Emit when the match has been established.\\r\\n     */\\r\\n    event Established(address a, uint a_index, address b, uint b_index, uint timestamp);\\r\\n\\r\\n    /**\\r\\n     * Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)\\r\\n     */\\r\\n    event Disclosed(address addr, uint index);\\r\\n\\r\\n    /**\\r\\n     * Emit when each participants disclosed their hand shape.\\r\\n     */\\r\\n    event Settled(address a, uint a_index, uint8 a_handShape, address b, uint b_index, uint8 b_handShape);\\r\\n\\r\\n    /**\\r\\n     * Emit when awarded JunkCoin to winner\\r\\n     */\\r\\n    event Earned(address addr, uint index, uint amount);\\r\\n\\r\\n    /**\\r\\n     * Emit when withdrew JunkCoin\\r\\n     */\\r\\n    event Withdrew(address addr, uint amount);\\r\\n\\r\\n    /**\\r\\n     * Sender is registered\\r\\n     */\\r\\n    modifier registered() {\\r\\n        require(participants[msg.sender].status > ParticipantStatus.NoRegistration, \\\"No registration\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sender is participant\\r\\n     */\\r\\n    modifier participating() {\\r\\n        require(participants[msg.sender].status > ParticipantStatus.NoParticipating, \\\"Not participants\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sender is non participant\\r\\n     */\\r\\n    modifier notParticipating() {\\r\\n        require(participants[msg.sender].status <= ParticipantStatus.NoParticipating, \\\"Already participated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calc opponent index\\r\\n     */\\r\\n    function calcOpponentIndex(uint _index) pure private returns(uint) {\\r\\n        return (_index & ~uint(1)) + ((_index + 1) & uint(1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get opponent index\\r\\n     * Require exists\\r\\n     */\\r\\n    function getOpponent(uint _index) view private returns(uint) {\\r\\n        // Even vs Odd\\r\\n        uint opponent = calcOpponentIndex(_index);\\r\\n\\r\\n        require(opponent < queue.length, \\\"Opponent not ready\\\");\\r\\n\\r\\n        return opponent;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get maximum of a and b\\r\\n     */\\r\\n    function bigger(uint _a, uint _b) pure private returns(uint) {\\r\\n        return (_a > _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate duration from latest timestamp\\r\\n     */\\r\\n    function calcDuration(uint _a, uint _b) view private returns(uint) {\\r\\n        return block.timestamp - bigger(_a, _b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Expire at 5 minutes after the match was established.\\r\\n     */\\r\\n    modifier timeout() {\\r\\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\\r\\n            uint index = participants[msg.sender].current;\\r\\n            uint opponent = calcOpponentIndex(index);\\r\\n\\r\\n            if (opponent < queue.length) {\\r\\n                // Keep deadline\\r\\n                uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n                if (duration > 5 minutes) {\\r\\n                    // Timeout -> Reset\\r\\n                    participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n\\r\\n                    if (queue[index].handShape != HandShape.Undefined && queue[opponent].handShape == HandShape.Undefined) {\\r\\n                        // Opponent timeout -> DEFWIN\\r\\n                        // Get coin\\r\\n                        coinStock[msg.sender] += ++participants[msg.sender].streak;\\r\\n\\r\\n                        emit Earned(msg.sender, index, participants[msg.sender].streak);\\r\\n                    } else {\\r\\n                        // Self timeout or both timeout -> DEFLOSS\\r\\n                        participants[msg.sender].streak = 0;\\r\\n                    }\\r\\n\\r\\n                    queue[index].status = MatchStatus.Settled;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Some coins have been stocked\\r\\n     */\\r\\n    modifier haveCoins() {\\r\\n        require(coinStock[msg.sender] > 0, \\\"No coins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Advance phase value after the transaction process\\r\\n     */\\r\\n    modifier phaseAdvance() {\\r\\n        _;\\r\\n        participants[msg.sender].phase++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Settle match result\\r\\n     * result: 0 draw, 1 win, -1 lose\\r\\n     */\\r\\n    function settle(uint _index, uint _opponent) view private returns(int8) {\\r\\n        // FIXME: Constants of non-value type not yet implemented on solidity 0.7.x\\r\\n        int8[4][4] memory lookupTable = [\\r\\n            [int8(0), int8(-1), int8(-1), int8(-1)],\\r\\n            [int8(1), int8( 0), int8( 1), int8(-1)],\\r\\n            [int8(1), int8(-1), int8( 0), int8( 1)],\\r\\n            [int8(1), int8( 1), int8(-1), int8( 0)]\\r\\n        ];\\r\\n        return lookupTable[uint8(queue[_index].handShape)][uint8(queue[_opponent].handShape)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Constructor\\r\\n     * Obtain JunkCoin address from args\\r\\n     * Obtain admin address from msg.sender\\r\\n     */\\r\\n    constructor(address _coin) {\\r\\n        coin = _coin;\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Join match queue\\r\\n     */\\r\\n    function join() public timeout notParticipating phaseAdvance {\\r\\n        uint index = queue.length;\\r\\n\\r\\n        queue.push(Queue({\\r\\n            addr: msg.sender,\\r\\n            handShape: HandShape.Undefined,\\r\\n            timestamp: block.timestamp,\\r\\n            status: MatchStatus.Participated\\r\\n        }));\\r\\n\\r\\n        if (participants[msg.sender].status == ParticipantStatus.NoRegistration) {\\r\\n            // New registration\\r\\n            participants[msg.sender] = ParticipantContext({\\r\\n                current: index,\\r\\n                status: ParticipantStatus.Participated,\\r\\n                streak: 0,\\r\\n                phase: 0\\r\\n            });\\r\\n        } else {\\r\\n            // Continuous\\r\\n            participants[msg.sender].current = index;\\r\\n            participants[msg.sender].status = ParticipantStatus.Participated;\\r\\n        }\\r\\n\\r\\n        emit Joined(msg.sender, index);\\r\\n\\r\\n        if (index % 2 == 1) {\\r\\n            // Establish match when index is odd.\\r\\n            uint timestamp = bigger(queue[index - 1].timestamp, queue[index].timestamp);\\r\\n            emit Established(queue[index - 1].addr, index - 1, queue[index].addr, index, timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Disclose hand shape each other.\\r\\n     * _handShape: 1 Guu, 2 Choki, 3 Paa\\r\\n     */\\r\\n    function disclose(uint8 _handShape) public participating phaseAdvance {\\r\\n        uint index = participants[msg.sender].current;\\r\\n        uint opponent = getOpponent(index);\\r\\n        address opponentAddr = queue[opponent].addr;\\r\\n\\r\\n        require(queue[index].status == MatchStatus.Participated, \\\"Already disclosed\\\" );\\r\\n        require(_handShape >= 1 && _handShape <= 3, \\\"Invalid hand shape\\\");\\r\\n\\r\\n        // Keep deadline\\r\\n        uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n        if (duration > 5 minutes) {\\r\\n            // Timeout -> Lost or Draw(if opponent timeout too)\\r\\n            queue[index].handShape = HandShape.Undefined;\\r\\n        } else {\\r\\n            queue[index].handShape = HandShape(_handShape);\\r\\n        }\\r\\n\\r\\n        queue[index].status = MatchStatus.Disclosed;\\r\\n        emit Disclosed(msg.sender, index);\\r\\n\\r\\n        if (queue[opponent].status == MatchStatus.Disclosed) {\\r\\n            emit Settled(\\r\\n                msg.sender,\\r\\n                index,\\r\\n                uint8(queue[index].handShape),\\r\\n                opponentAddr,\\r\\n                opponent,\\r\\n                uint8(queue[opponent].handShape)\\r\\n            );\\r\\n\\r\\n            // Settlement\\r\\n            int8 result = settle(index, opponent);\\r\\n\\r\\n            if (result == 1) {\\r\\n                // Won -> Get coin\\r\\n                coinStock[msg.sender] += ++participants[msg.sender].streak;\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                // Reset opponent status for next join\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                participants[opponentAddr].streak = 0;\\r\\n\\r\\n                emit Earned(msg.sender, index, participants[msg.sender].streak);\\r\\n\\r\\n            } else if (result == -1) {\\r\\n                // Lost -> The coin is taken by opponent\\r\\n                coinStock[opponentAddr] += ++participants[opponentAddr].streak;\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                // Reset own status for next join\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                participants[msg.sender].streak = 0;\\r\\n\\r\\n                emit Earned(opponentAddr, opponent, participants[opponentAddr].streak);\\r\\n\\r\\n            } else {\\r\\n                // Draw -> No one get coin\\r\\n                // Reset both status for next join\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                participants[msg.sender].streak = 0;\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                participants[opponentAddr].streak = 0;\\r\\n            }\\r\\n\\r\\n            queue[index].status = MatchStatus.Settled;\\r\\n            queue[opponent].status = MatchStatus.Settled;\\r\\n            participants[opponentAddr].phase++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraw JunkCoin\\r\\n     */\\r\\n    function withdraw() public timeout haveCoins phaseAdvance {\\r\\n        uint amount = coinStock[msg.sender];\\r\\n        coinStock[msg.sender] = 0;\\r\\n        IERC20(coin).transferFrom(admin, msg.sender, amount);\\r\\n\\r\\n        emit Withdrew(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get own status\\r\\n     */\\r\\n    function getStatus() view public registered\\r\\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\\r\\n    {\\r\\n        addr = msg.sender;\\r\\n        index = participants[msg.sender].current;\\r\\n        status = uint8(queue[index].status);\\r\\n        timestamp = queue[index].timestamp;\\r\\n        handShape = uint8(queue[index].handShape);\\r\\n        streak = participants[msg.sender].streak;\\r\\n        phase = participants[msg.sender].phase;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get own coin balance\\r\\n     * This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args.\\r\\n     */\\r\\n    function getCoinBalance(uint timestamp) view public returns(uint coins) {\\r\\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\\r\\n            // Keep deadline\\r\\n            uint index = participants[msg.sender].current;\\r\\n\\r\\n            if (queue[index].status == MatchStatus.Disclosed) {\\r\\n                // No settled yet\\r\\n                uint opponent = getOpponent(index);\\r\\n                uint duration = timestamp - bigger(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n                if (duration > 5 minutes &&\\r\\n                    queue[index].handShape != HandShape.Undefined &&\\r\\n                    queue[opponent].handShape == HandShape.Undefined)\\r\\n                {\\r\\n                    // DEFWIN previous match, add (streak + 1) coins to balance\\r\\n                    coins += participants[msg.sender].streak + 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        coins += coinStock[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get opponent status\\r\\n     */\\r\\n    function getOpponentStatus() view public registered\\r\\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\\r\\n    {\\r\\n        uint  self = participants[msg.sender].current;\\r\\n\\r\\n        index = getOpponent(self);\\r\\n        addr = queue[index].addr;\\r\\n        status = uint8(queue[index].status);\\r\\n        timestamp = queue[index].timestamp;\\r\\n        streak = participants[queue[index].addr].streak;\\r\\n        phase = participants[queue[index].addr].phase;\\r\\n\\r\\n        // You can obtain opponent hand shape when disclosed own hand shape\\r\\n        handShape = uint8((queue[self].status >= MatchStatus.Disclosed) ? queue[index].handShape : HandShape.Undefined);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38ac80de0ce5ef718e404091eaa047997dd436433d050726683a11ad95e3ffec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052348015610019576000806100166125cf565b50505b506004361061007b5760003560e01c8063b48b557011610059578063b48b557014610122578063b688a3631461012a578063e4df8520146101325761007b565b80633ccfd60b146100895780634e69d560146100935780638fca6874146100ea575b6000806100866125cf565b50505b61009161015b565b005b61009b610800565b60405180886001600160a01b031681526020018781526020018660ff1681526020018581526020018460ff16815260200183815260200182815260200197505050505050505060405180910390f35b61011060048036036020811015610109576000806101066125cf565b50505b5035610a2b565b60405190815260200160405180910390f35b61009b610ca2565b610091610fc8565b610091600480360360208110156101515760008061014e6125cf565b50505b503560ff16611857565b6002600360005a61016a61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061019861268f565b906101000a900460ff1660028111156101ad57fe5b1415610540576000600360005a6101c261263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206101ea61268f565b905060006101f78261239c565b905060028061020461268f565b905081101561053d5760006102716002848161021e61268f565b811061022657fe5b906000526020600020906003020160010161023f61268f565b6002848161024b61268f565b811061025357fe5b906000526020600020906003020160010161026c61268f565b6123ad565b905061012c81111561053b576001600360005a61028c61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a816102be61268f565b8160ff021916908360028111156102d157fe5b0217906102dc6126db565b50600091506102e89050565b600284816102f461268f565b81106102fc57fe5b9060005260206000206014916003020161031461268f565b906101000a900460ff16600381111561032957fe5b14158015610377575060006002838161034061268f565b811061034857fe5b9060005260206000206014916003020161036061268f565b906101000a900460ff16600381111561037557fe5b145b156104a657600360005a61038961263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206002016000816103b761268f565b600101918291506103c66126db565b5050600460005a6103d561263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828261040161268f565b01925050819061040f6126db565b5050507f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed785a61043c61263a565b84600360005a61044a61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020161047561268f565b60405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a16104e6565b6000600360005a6104b561263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020181906104e26126db565b5050505b6003600284816104f461268f565b81106104fc57fe5b90600052602060002060026003909202010160018161051961268f565b8160ff0219169083600381111561052c57fe5b0217906105376126db565b5050505b505b50505b6000600460005a61054f61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002061057761268f565b116105d15760405162461bcd60e51b815260206004820152600860248201527f4e6f20636f696e730000000000000000000000000000000000000000000000006044820152606401604051809103906105ce6125cf565b50505b6000600460005a6105e061263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002061060861268f565b90506000600460005a61061961263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002081906106436126db565b505050600160009061065361268f565b906101000a90046001600160a01b03166001600160a01b03166323b872dd60008061067c61268f565b906101000a90046001600160a01b03165a61069561263a565b846040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529190921660248201526044810191909152606401602060405180830381600087806106fb612729565b1580156107105760008061070d6125cf565b50505b505a61071a612775565b50505050505015801561073a573d6000803e3d60006107376125cf565b50505b505050506040513d6020811015610759576000806107566125cf565b50505b810190808051507fb244b9a17ad633c6e83b7983ee04320484956a68ddbe96a0b70dfca1cf19d723925050505a61078e61263a565b826040516001600160a01b03909216825260208201526040908101905180910390a150600360005a6107be61263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206003016000816107ec61268f565b916001830191506107fb6126db565b505050565b600080808080808080600360005a61081661263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061084461268f565b906101000a900460ff16600281111561085957fe5b116108b35760405162461bcd60e51b815260206004820152600f60248201527f4e6f20726567697374726174696f6e00000000000000000000000000000000006044820152606401604051809103906108b06125cf565b50505b5a6108bc61263a565b9650600360005a6108cb61263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206108f361268f565b95506002868161090161268f565b811061090957fe5b906000526020600020906003020160020160009061092561268f565b906101000a900460ff16600381111561093a57fe5b94506002868161094861268f565b811061095057fe5b906000526020600020906003020160010161096961268f565b93506002868161097761268f565b811061097f57fe5b9060005260206000206014916003020161099761268f565b906101000a900460ff1660038111156109ac57fe5b9250600360005a6109bb61263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206002016109e661268f565b9150600360005a6109f561263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600301610a2061268f565b905090919293949596565b60006002600360005a610a3c61263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101600090610a6a61268f565b906101000a900460ff166002811115610a7f57fe5b1415610c67576000600360005a610a9461263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020610abc61268f565b90506002808281610acb61268f565b8110610ad357fe5b9060005260206000209060030201600201600090610aef61268f565b906101000a900460ff166003811115610b0457fe5b1415610c65576000610b15826123cc565b90506000610b7b60028481610b2861268f565b8110610b3057fe5b9060005260206000209060030201600101610b4961268f565b60028481610b5561268f565b8110610b5d57fe5b9060005260206000209060030201600101610b7661268f565b612447565b8503905061012c81118015610bd15750600060028481610b9961268f565b8110610ba157fe5b90600052602060002060149160030201610bb961268f565b906101000a900460ff166003811115610bce57fe5b14155b8015610c1d5750600060028381610be661268f565b8110610bee57fe5b90600052602060002060149160030201610c0661268f565b906101000a900460ff166003811115610c1b57fe5b145b15610c6257600360005a610c2f61263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201610c5a61268f565b600101840193505b50505b505b600460005a610c7461263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020610c9c61268f565b01919050565b600080808080808080600360005a610cb861263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101600090610ce661268f565b906101000a900460ff166002811115610cfb57fe5b11610d555760405162461bcd60e51b815260206004820152600f60248201527f4e6f20726567697374726174696f6e0000000000000000000000000000000000604482015260640160405180910390610d526125cf565b50505b6000600360005a610d6461263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020610d8c61268f565b9050610d97816123cc565b965060028781610da561268f565b8110610dad57fe5b90600052602060002060009160030201610dc561268f565b906101000a90046001600160a01b0316975060028781610de361268f565b8110610deb57fe5b9060005260206000209060030201600201600090610e0761268f565b906101000a900460ff166003811115610e1c57fe5b955060028781610e2a61268f565b8110610e3257fe5b9060005260206000209060030201600101610e4b61268f565b94506003600060028981610e5d61268f565b8110610e6557fe5b90600052602060002060009160030201610e7d61268f565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600201610eb861268f565b92506003600060028981610eca61268f565b8110610ed257fe5b90600052602060002060009160030201610eea61268f565b906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600301610f2561268f565b91506002808281610f3461268f565b8110610f3c57fe5b9060005260206000209060030201600201600090610f5861268f565b906101000a900460ff166003811115610f6d57fe5b1015610f7a576000610fb1565b60028781610f8661268f565b8110610f8e57fe5b90600052602060002060149160030201610fa661268f565b906101000a900460ff165b6003811115610fbc57fe5b93505090919293949596565b6002600360005a610fd761263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061100561268f565b906101000a900460ff16600281111561101a57fe5b141561135a576000600360005a61102f61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002061105761268f565b905060006110648261239c565b905060028061107161268f565b905081101561135757600061108b6002848161021e61268f565b905061012c811115611355576001600360005a6110a661263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a816110d861268f565b8160ff021916908360028111156110eb57fe5b0217906110f66126db565b50600091506111029050565b6002848161110e61268f565b811061111657fe5b9060005260206000206014916003020161112e61268f565b906101000a900460ff16600381111561114357fe5b14158015611191575060006002838161115a61268f565b811061116257fe5b9060005260206000206014916003020161117a61268f565b906101000a900460ff16600381111561118f57fe5b145b156112c057600360005a6111a361263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206002016000816111d161268f565b600101918291506111e06126db565b5050600460005a6111ef61263a565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828261121b61268f565b0192505081906112296126db565b5050507f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed785a61125661263a565b84600360005a61126461263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020161128f61268f565b60405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a1611300565b6000600360005a6112cf61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020181906112fc6126db565b5050505b60036002848161130e61268f565b811061131657fe5b90600052602060002060026003909202010160018161133361268f565b8160ff0219169083600381111561134657fe5b0217906113516126db565b5050505b505b50505b6001600360005a61136961263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061139761268f565b906101000a900460ff1660028111156113ac57fe5b11156114075760405162461bcd60e51b815260206004820152601460248201527f416c7265616479207061727469636970617465640000000000000000000000006044820152606401604051809103906114046125cf565b50505b600060028061141461268f565b90509050600260405180608001604052805a61142e61263a565b6001600160a01b03168152602001600081526020015a61144c612860565b815260200160019052908060018161146261268f565b01808261146d6126db565b505060009283526000190191602091502060039091020181518160018161149261268f565b816001600160a01b0302191690836001600160a01b03160217906114b46126db565b505050602082015181600160a01b816114cb61268f565b8160ff021916908360038111156114de57fe5b0217906114e96126db565b5050506040820151816001016114fd6126db565b505060608201516002820160018161151361268f565b8160ff0219169083600381111561152657fe5b0217906115316126db565b506000935061153f92505050565b600360005a61154c61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061157a61268f565b906101000a900460ff16600281111561158f57fe5b141561165657604051608081016040528181526020810160028152602001600081526020016000815250600360005a6115c661263a565b6001600160a01b03166001600160a01b031681526020019081526020016000208151816115f16126db565b505060208201516001808301908161160761268f565b8160ff0219169083600281111561161a57fe5b0217906116256126db565b5050506040820151816002016116396126db565b505060608201518160030161164c6126db565b50509050506116f4565b80600360005a61166461263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020819061168e6126db565b5050506002600360005a6116a061263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a816116d261268f565b8160ff021916908360028111156116e557fe5b0217906116f06126db565b5050505b7f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d5a61171e61263a565b826040516001600160a01b03909216825260208201526040908101905180910390a1600281066001141561184957600061176060026001840381610b2861268f565b90507fd599fddddd6f19ebc013f20b5a43b042ee5964d209a964274fab8977eb819c086002600184038161179261268f565b811061179a57fe5b906000526020600020600091600302016117b261268f565b906101000a90046001600160a01b031660018403600285816117d261268f565b81106117da57fe5b906000526020600020600091600302016117f261268f565b906101000a90046001600160a01b0316858560405180866001600160a01b03168152602001858152602001846001600160a01b031681526020018381526020018281526020019550505050505060405180910390a1505b50600360005a6107be61263a565b6001600360005a61186661263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160009061189461268f565b906101000a900460ff1660028111156118a957fe5b116119035760405162461bcd60e51b815260206004820152601060248201527f4e6f74207061727469636970616e7473000000000000000000000000000000006044820152606401604051809103906119006125cf565b50505b6000600360005a61191261263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002061193a61268f565b90506000611947826123cc565b905060006002828161195761268f565b811061195f57fe5b9060005260206000206000916003020161197761268f565b6001600160a01b036101009290920a900416905060016002848161199961268f565b81106119a157fe5b90600052602060002090600302016002016000906119bd61268f565b906101000a900460ff1660038111156119d257fe5b14611a2c5760405162461bcd60e51b815260206004820152601160248201527f416c726561647920646973636c6f736564000000000000000000000000000000604482015260640160405180910390611a296125cf565b50505b60018460ff1610158015611a44575060038460ff1611155b611a9d5760405162461bcd60e51b815260206004820152601260248201527f496e76616c69642068616e642073686170650000000000000000000000000000604482015260640160405180910390611a9a6125cf565b50505b6000611adb60028581611aae61268f565b8110611ab657fe5b9060005260206000209060030201600101611acf61268f565b6002858161024b61268f565b905061012c811115611b4057600060028581611af561268f565b8110611afd57fe5b906000526020600020600390910201600160a01b81611b1a61268f565b8160ff02191690836003811115611b2d57fe5b021790611b386126db565b505050611ba2565b8460ff166003811115611b4f57fe5b60028581611b5b61268f565b8110611b6357fe5b906000526020600020600390910201600160a01b81611b8061268f565b8160ff02191690836003811115611b9357fe5b021790611b9e6126db565b5050505b6002808581611baf61268f565b8110611bb757fe5b906000526020600020600260039092020101600181611bd461268f565b8160ff02191690836003811115611be757fe5b021790611bf26126db565b5050507f23a6200ad6fe186c45badcd285c34c438705aeb48f037b18133d21df2544ff765a611c1f61263a565b856040516001600160a01b03909216825260208201526040908101905180910390a16002808481611c4e61268f565b8110611c5657fe5b9060005260206000209060030201600201600090611c7261268f565b906101000a900460ff166003811115611c8757fe5b1415612348577f13e26580722ac6f5336050b3e9fcd2db95f9313d74b4c00ceaf1017e0e159cec5a611cb761263a565b8560028781611cc461268f565b8110611ccc57fe5b90600052602060002060149160030201611ce461268f565b906101000a900460ff166003811115611cf957fe5b858760028981611d0761268f565b8110611d0f57fe5b90600052602060002060149160030201611d2761268f565b906101000a900460ff166003811115611d3c57fe5b6040516001600160a01b039687168152602081019590955260ff9384166040808701919091529290951660608501526080840152921660a082015260c001905180910390a16000611d8d858561245f565b90508060000b60011415611f9d57600360005a611da861263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201600081611dd661268f565b60010191829150611de56126db565b5050600460005a611df461263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282611e2061268f565b019250508190611e2e6126db565b5050506001600360005a611e4061263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a81611e7261268f565b8160ff02191690836002811115611e8557fe5b021790611e906126db565b5050506001600160a01b038316600090815260036020526001906040902060010160006101000a81611ec061268f565b8160ff02191690836002811115611ed357fe5b021790611ede6126db565b5050506001600160a01b03831660009081526003602052604081206002018190611f066126db565b5050507f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed785a611f3361263a565b86600360005a611f4161263a565b6001600160a01b03166001600160a01b03168152602001908152602001600020600201611f6c61268f565b60405180846001600160a01b03168152602001838152602001828152602001935050505060405180910390a1612266565b8060000b600019141561214e576001600160a01b0383166000908152600360205260409020600201600081611fd061268f565b60010191829150611fdf6126db565b50506001600160a01b03841660009081526004602052604090206000828261200561268f565b0192505081906120136126db565b5050506001600160a01b038316600090815260036020526001906040902060010160006101000a8161204361268f565b8160ff0219169083600281111561205657fe5b0217906120616126db565b5050506001600360005a61207361263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a816120a561268f565b8160ff021916908360028111156120b857fe5b0217906120c36126db565b5050506000600360005a6120d561263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020181906121026126db565b5050506001600160a01b038316600090815260036020527f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed78908490869060409020600201611f6c61268f565b6001600360005a61215d61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160006101000a8161218f61268f565b8160ff021916908360028111156121a257fe5b0217906121ad6126db565b5050506000600360005a6121bf61263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060020181906121ec6126db565b5050506001600160a01b038316600090815260036020526001906040902060010160006101000a8161221c61268f565b8160ff0219169083600281111561222f57fe5b02179061223a6126db565b5050506001600160a01b038316600090815260036020526040812060020181906122626126db565b5050505b60036002868161227461268f565b811061227c57fe5b90600052602060002060026003909202010160018161229961268f565b8160ff021916908360038111156122ac57fe5b0217906122b76126db565b5050506003600285816122c861268f565b81106122d057fe5b9060005260206000206002600390920201016001816122ed61268f565b8160ff0219169083600381111561230057fe5b02179061230b6126db565b5050506001600160a01b038316600090815260036020526040902060030160008161233461268f565b916001830191506123436126db565b505050505b50505050600360005a61235961263a565b6001600160a01b03166001600160a01b0316815260200190815260200160002060030160008161238761268f565b916001830191506123966126db565b50505050565b600119811660018281011601919050565b60006123b98383612447565b5a6123c2612860565b0390505b92915050565b6000806123d88361239c565b90506002806123e561268f565b905081106123c65760405162461bcd60e51b815260206004820152601260248201527f4f70706f6e656e74206e6f74207265616479000000000000000000000000000060448201526064016040518091039061243f6125cf565b505092915050565b60008183116124565781612458565b825b9392505050565b60008060405180608001604052806040516080810160409081526000825260001960208084018290528284018290526060840191909152918352910190516080810160409081526001808352600060208085019190915282840191909152600019606084015291835291019051608081016040908152600180835260001960208085019190915260008385015260608401919091529183529101905160808101604090815260018083526020830152600019908201526000606082015290529050806002858161252d61268f565b811061253557fe5b9060005260206000206014916003020161254d61268f565b906101000a900460ff16600381111561256257fe5b60ff166004811061256f57fe5b60200201516002848161258061268f565b811061258857fe5b906000526020600020601491600302016125a061268f565b906101000a900460ff1660038111156125b557fe5b60ff16600481106125c257fe5b6020020151949350505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b868110156126075780860151828201604001526020016125ec565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b60408110156107fb57600082820152602001612678565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612678565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b600081526020612678565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b80516000825293506020612678565b6385979f76598160e01b81526127a6565b80808311156123c6575090919050565b80808310156123c6575090919050565b836004820152846024820152606060448201528760648201526084810160005b898110156127de5780890151828201526020016127c6565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596128338e3d612796565b8d0161283f8187612786565b5b828110156128545760008152602001612840565b50929d50505050505050565b63bdbf8c36598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051600082529350602061267856",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "Disclosed(address,uint256)": {
        "notice": "Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)"
      },
      "Earned(address,uint256,uint256)": {
        "notice": "Emit when awarded JunkCoin to winner"
      },
      "Established(address,uint256,address,uint256,uint256)": {
        "notice": "Emit when the match has been established."
      },
      "Joined(address,uint256)": {
        "notice": "Emit when participant joined."
      },
      "Settled(address,uint256,uint8,address,uint256,uint8)": {
        "notice": "Emit when each participants disclosed their hand shape."
      },
      "Withdrew(address,uint256)": {
        "notice": "Emit when withdrew JunkCoin"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor Obtain JunkCoin address from args Obtain admin address from msg.sender"
      },
      "disclose(uint8)": {
        "notice": "Disclose hand shape each other. _handShape: 1 Guu, 2 Choki, 3 Paa"
      },
      "getCoinBalance(uint256)": {
        "notice": "Get own coin balance This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args."
      },
      "getOpponentStatus()": {
        "notice": "Get opponent status"
      },
      "getStatus()": {
        "notice": "Get own status"
      },
      "join()": {
        "notice": "Join match queue"
      },
      "withdraw()": {
        "notice": "Withdraw JunkCoin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1488,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1490,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "coin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1493,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Queue)1486_storage)dyn_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "participants",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ParticipantContext)1477_storage)"
      },
      {
        "astId": 1501,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "coinStock",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Queue)1486_storage)dyn_storage": {
        "base": "t_struct(Queue)1486_storage",
        "encoding": "dynamic_array",
        "label": "struct Junkeng.Queue[]",
        "numberOfBytes": "32"
      },
      "t_enum(HandShape)1468": {
        "encoding": "inplace",
        "label": "enum Junkeng.HandShape",
        "numberOfBytes": "1"
      },
      "t_enum(MatchStatus)1463": {
        "encoding": "inplace",
        "label": "enum Junkeng.MatchStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ParticipantStatus)1458": {
        "encoding": "inplace",
        "label": "enum Junkeng.ParticipantStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ParticipantContext)1477_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Junkeng.ParticipantContext)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantContext)1477_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ParticipantContext)1477_storage": {
        "encoding": "inplace",
        "label": "struct Junkeng.ParticipantContext",
        "members": [
          {
            "astId": 1470,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1472,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ParticipantStatus)1458"
          },
          {
            "astId": 1474,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "streak",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1476,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "phase",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Queue)1486_storage": {
        "encoding": "inplace",
        "label": "struct Junkeng.Queue",
        "members": [
          {
            "astId": 1479,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1481,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "handShape",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(HandShape)1468"
          },
          {
            "astId": 1483,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1485,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(MatchStatus)1463"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
