{
  "address": "0x3e4CFaa8730092552d9425575E49bB542e329981",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2CrossDomainMessenger",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "DepositFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "_l1TokenGateway",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "finalizeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFinalizeWithdrawalL1Gas",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "_l1TokenGateway",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1TokenGateway",
      "outputs": [
        {
          "internalType": "contract iOVM_L1TokenGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f6901d9c49377c6bd823b9eee5a820a3c2a39c3971ee679813d700b69e0a96f",
  "receipt": {
    "to": null,
    "from": "0x9858effd232b4033e47d90003d41ec34ecaeda94",
    "contractAddress": "0xc5273abfb36550090095b1edec019216ad21be6c",
    "transactionIndex": "0x0",
    "gasUsed": "0xf4240",
    "logsBloom": "0x
    "blockHash": "0xf9514eb7aa3c71ce6c064924c528e31e928ae55b7df696e0f430aa37fa8f0ab7",
    "transactionHash": "0x5f6901d9c49377c6bd823b9eee5a820a3c2a39c3971ee679813d700b69e0a96f",
    "logs": [],
    "blockNumber": "0x1",
    "cumulativeGasUsed": "0xf4240",
    "status": "0x0"
  },
  "args": [
    "0x4200000000000000000000000000000000000007",
    "JunkCoin",
    "JKC"
  ],
  "solcInputHash": "651826c5571b9d32e3bb0531c78af9e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+ovm+commit.c88bc4b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2CrossDomainMessenger\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"_l1TokenGateway\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finalizeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFinalizeWithdrawalL1Gas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"_l1TokenGateway\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1TokenGateway\",\"outputs\":[{\"internalType\":\"contract iOVM_L1TokenGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"finalizeDeposit(address,uint256)\":{\"details\":\"Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this  L2 token.  This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. \",\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_to\":\"Address to receive the withdrawal at\"}},\"getFinalizeWithdrawalL1Gas()\":{\"details\":\"Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be dynamic, and the above public constant does not suffice.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"init(address)\":{\"details\":\"Initialize this contract with the L1 token gateway address. The flow: 1) this contract gets deployed on L2, 2) the L1 gateway is deployed with addr from (1), 3) L1 gateway address passed here.\",\"params\":{\"_l1TokenGateway\":\"Address of the corresponding L1 gateway deployed to the main chain\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"details\":\"initiate a withdraw of some tokens to the caller's account on L1\",\"params\":{\"_amount\":\"Amount of the token to withdraw\"}},\"withdrawTo(address,uint256)\":{\"details\":\"initiate a withdraw of some token to a recipient's account on L1\",\"params\":{\"_amount\":\"Amount of the token to withdraw\",\"_to\":\"L1 adress to credit the withdrawal to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Runtime target: OVM\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JunkCoinDepositedERC20.sol\":\"JunkCoinDepositedERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L2DepositedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/* Interface Imports */\\nimport { iOVM_L2DepositedToken } from \\\"../../../iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\\\";\\nimport { iOVM_L1TokenGateway } from \\\"../../../iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\\\";\\n\\n/* Library Imports */\\nimport { OVM_CrossDomainEnabled } from \\\"../../../libraries/bridge/OVM_CrossDomainEnabled.sol\\\";\\n\\n/**\\n * @title Abs_L2DepositedToken\\n * @dev An L2 Deposited Token is an L2 representation of funds which were deposited from L1.\\n * Usually contract mints new tokens when it hears about deposits into the L1 ERC20 gateway.\\n * This contract also burns the tokens intended for withdrawal, informing the L1 gateway to release L1 funds.\\n *\\n * NOTE: This abstract contract gives all the core functionality of a deposited token implementation except for the\\n * token's internal accounting itself.  This gives developers an easy way to implement children with their own token code.\\n *\\n * Compiler used: optimistic-solc\\n * Runtime target: OVM\\n */\\nabstract contract Abs_L2DepositedToken is iOVM_L2DepositedToken, OVM_CrossDomainEnabled {\\n\\n    /*******************\\n     * Contract Events *\\n     *******************/\\n\\n    event Initialized(iOVM_L1TokenGateway _l1TokenGateway);\\n\\n    /********************************\\n     * External Contract References *\\n     ********************************/\\n\\n    iOVM_L1TokenGateway public l1TokenGateway;\\n\\n    /********************************\\n     * Constructor & Initialization *\\n     ********************************/\\n\\n    /**\\n     * @param _l2CrossDomainMessenger L1 Messenger address being used for cross-chain communications.\\n     */\\n    constructor(\\n        address _l2CrossDomainMessenger\\n    )\\n        OVM_CrossDomainEnabled(_l2CrossDomainMessenger)\\n    {}\\n\\n    /**\\n     * @dev Initialize this contract with the L1 token gateway address.\\n     * The flow: 1) this contract gets deployed on L2, 2) the L1\\n     * gateway is deployed with addr from (1), 3) L1 gateway address passed here.\\n     *\\n     * @param _l1TokenGateway Address of the corresponding L1 gateway deployed to the main chain\\n     */\\n\\n    function init(\\n        iOVM_L1TokenGateway _l1TokenGateway\\n    )\\n        public\\n    {\\n        require(address(l1TokenGateway) == address(0), \\\"Contract has already been initialized\\\");\\n\\n        l1TokenGateway = _l1TokenGateway;\\n        \\n        emit Initialized(l1TokenGateway);\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyInitialized() {\\n        require(address(l1TokenGateway) != address(0), \\\"Contract has not yet been initialized\\\");\\n        _;\\n    }\\n\\n    /********************************\\n     * Overridable Accounting logic *\\n     ********************************/\\n\\n    // Default gas value which can be overridden if more complex logic runs on L2.\\n    uint32 constant DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS = 100000;\\n\\n    /**\\n     * @dev Core logic to be performed when a withdrawal from L2 is initialized.\\n     * In most cases, this will simply burn the withdrawn L2 funds.\\n     *\\n     * @param _to Address being withdrawn to\\n     * @param _amount Amount being withdrawn\\n     */\\n\\n    function _handleInitiateWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        virtual\\n    {\\n        revert(\\\"Accounting must be implemented by child contract.\\\");\\n    }\\n\\n    /**\\n     * @dev Core logic to be performed when a deposit from L2 is finalized on L2.\\n     * In most cases, this will simply _mint() to credit L2 funds to the recipient.\\n     *\\n     * @param _to Address being deposited to on L2\\n     * @param _amount Amount which was deposited on L1\\n     */\\n    function _handleFinalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n        virtual\\n    {\\n        revert(\\\"Accounting must be implemented by child contract.\\\");\\n    }\\n\\n    /**\\n     * @dev Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be\\n     * dynamic, and the above public constant does not suffice.\\n     *\\n     */\\n\\n    function getFinalizeWithdrawalL1Gas()\\n        public\\n        view\\n        virtual\\n        returns(\\n            uint32\\n        )\\n    {\\n        return DEFAULT_FINALIZE_WITHDRAWAL_L1_GAS;\\n    }\\n\\n\\n    /***************\\n     * Withdrawing *\\n     ***************/\\n\\n    /**\\n     * @dev initiate a withdraw of some tokens to the caller's account on L1\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function withdraw(\\n        uint _amount\\n    )\\n        external\\n        override\\n        onlyInitialized()\\n    {\\n        _initiateWithdrawal(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev initiate a withdraw of some token to a recipient's account on L1\\n     * @param _to L1 adress to credit the withdrawal to\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function withdrawTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external\\n        override\\n        onlyInitialized()\\n    {\\n        _initiateWithdrawal(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Performs the logic for deposits by storing the token and informing the L2 token Gateway of the deposit.\\n     *\\n     * @param _to Account to give the withdrawal to on L1\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function _initiateWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        internal\\n    {\\n        // Call our withdrawal accounting handler implemented by child contracts (usually a _burn)\\n        _handleInitiateWithdrawal(_to, _amount);\\n\\n        // Construct calldata for l1TokenGateway.finalizeWithdrawal(_to, _amount)\\n        bytes memory data = abi.encodeWithSelector(\\n            iOVM_L1TokenGateway.finalizeWithdrawal.selector,\\n            _to,\\n            _amount\\n        );\\n\\n        // Send message up to L1 gateway\\n        sendCrossDomainMessage(\\n            address(l1TokenGateway),\\n            data,\\n            getFinalizeWithdrawalL1Gas()\\n        );\\n\\n        emit WithdrawalInitiated(msg.sender, _to, _amount);\\n    }\\n\\n    /************************************\\n     * Cross-chain Function: Depositing *\\n     ************************************/\\n\\n    /**\\n     * @dev Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this \\n     * L2 token. \\n     * This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. \\n     *\\n     * @param _to Address to receive the withdrawal at\\n     * @param _amount Amount of the token to withdraw\\n     */\\n    function finalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        external\\n        override \\n        onlyInitialized()\\n        onlyFromCrossDomainAccount(address(l1TokenGateway))\\n    {\\n        _handleFinalizeDeposit(_to, _amount);\\n        emit DepositFinalized(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x350bec3334009f540920c6e665f066ce5a1ef7c3864a9c007dedb12db3dd6ffa\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iAbs_BaseCrossDomainMessenger\\n */\\ninterface iAbs_BaseCrossDomainMessenger {\\n\\n    /**********\\n     * Events *\\n     **********/\\n    event SentMessage(bytes message);\\n    event RelayedMessage(bytes32 msgHash);\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc2bd6b373daae2ede34281f4be5938d02b9d1cfb056b40d65ff70b7f16ce3c86\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L1TokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_L1TokenGateway\\n */\\ninterface iOVM_L1TokenGateway {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event DepositInitiated(\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount\\n    );\\n  \\n    event WithdrawalFinalized(\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function deposit(\\n        uint _amount\\n    )\\n        external;\\n\\n    function depositTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    function finalizeWithdrawal(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xc5503d644d170daa5b46a1228f5c73ef6d068226a2b2acc62d41df00c36b900e\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/iOVM/bridge/tokens/iOVM_L2DepositedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title iOVM_L2DepositedToken\\n */\\ninterface iOVM_L2DepositedToken {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event WithdrawalInitiated(\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount\\n    );\\n\\n    event DepositFinalized(\\n        address indexed _to,\\n        uint256 _amount\\n    );    \\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function withdraw(\\n        uint _amount\\n    )\\n        external;\\n\\n    function withdrawTo(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    function finalizeDeposit(\\n        address _to,\\n        uint _amount\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xaa874355e98c444a58712179acaf5ca344296dfa8229577a38a1d14160ce46f8\",\"license\":\"MIT\"},\"@eth-optimism/contracts/build/contracts/libraries/bridge/OVM_CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n/* Interface Imports */\\nimport { iAbs_BaseCrossDomainMessenger } from \\\"../../iOVM/bridge/messaging/iAbs_BaseCrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title OVM_CrossDomainEnabled\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n * Runtime target: defined by inheriting contract\\n */\\ncontract OVM_CrossDomainEnabled {\\n    // Messenger contract used to send and recieve messages from the other domain.\\n    address public messenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/    \\n    constructor(\\n        address _messenger\\n    ) {\\n        messenger = _messenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * @notice Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(\\n        address _sourceDomainAccount\\n    ) {\\n        require(\\n            msg.sender == address(getCrossDomainMessenger()),\\n            \\\"OVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"OVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n    \\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * @notice Gets the messenger, usually from storage.  This function is exposed in case a child contract needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used. \\n     */\\n    function getCrossDomainMessenger()\\n        internal\\n        virtual\\n        returns(\\n            iAbs_BaseCrossDomainMessenger\\n        )\\n    {\\n        return iAbs_BaseCrossDomainMessenger(messenger);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _data The data to send to the target (usually calldata to a function with `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        bytes memory _data,\\n        uint32 _gasLimit\\n    ) internal {\\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _data, _gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x1b1c5adbb359f3f46ca9e43b366a80563c031560e9f1f24ab4742b2d79403ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/JunkCoinDepositedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport { JunkCoinERC20 } from \\\"./JunkCoinERC20.sol\\\";\\r\\nimport { Abs_L2DepositedToken } from \\\"@eth-optimism/contracts/build/contracts/OVM/bridge/tokens/Abs_L2DepositedToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * Runtime target: OVM\\r\\n */\\r\\ncontract JunkCoinDepositedERC20 is Abs_L2DepositedToken, JunkCoinERC20 {\\r\\n\\r\\n    constructor(\\r\\n        address _l2CrossDomainMessenger,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    )\\r\\n        Abs_L2DepositedToken(_l2CrossDomainMessenger)\\r\\n        JunkCoinERC20(_name, _symbol, 0)\\r\\n    {}\\r\\n\\r\\n    function _handleInitiateWithdrawal(\\r\\n        address _to,\\r\\n        uint _amount\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        _burn(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function _handleFinalizeDeposit(\\r\\n        address _to,\\r\\n        uint _amount\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2af7b780f48e94ba4806b076df63e83ea7f305e8f61f3674b9b89a03cce17417\",\"license\":\"MIT\"},\"contracts/JunkCoinERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * Runtime target: EVM\\r\\n */\\r\\ncontract JunkCoinERC20 is ERC20 {\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol, uint _initialSupplies) ERC20(_name, _symbol) {\\r\\n        _mint(msg.sender, _initialSupplies);\\r\\n    }\\r\\n\\r\\n    function decimals() public view override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb9523a4316ac4eee811046957dbcb9d2f32ed79157c0906844658f5d6b2f0f56\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001c57600080620000196200046b565b50505b506040516200217138038062002171833981810160405260608110156200004d576000806200004a6200046b565b50505b8101908080519291906020018051604051939291908464010000000082111562000081576000806200007e6200046b565b50505b908301906020820185811115620000a2576000806200009f6200046b565b50505b8251640100000000811182820188101715620000c857600080620000c56200046b565b50505b825250602001908051906020019080838360005b83811015620000f6578082015183820152602001620000dc565b50505050905090810190601f168015620001245780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200015357600080620001506200046b565b50505b9083019060208201858111156200017457600080620001716200046b565b50505b82516401000000008111828201881017156200019a57600080620001976200046b565b50505b825250602001908051906020019080838360005b83811015620001c8578082015183820152602001620001ae565b50505050905090810190601f168015620001f65780820380516001836020036101000a031916815260200191505b506040525050508181600082828780806000806101000a8162000218620004d8565b816001600160a01b0302191690836001600160a01b03160217906200023c62000535565b50505050508160059080516200025792916020019062000584565b5060068180516200026d92916020019062000584565b50601260076001816200027f620004d8565b8160ff021916908360ff160217906200029762000535565b5050505050620002b25a620002ab62000646565b82620002be565b505050505050620006b0565b6001600160a01b038216620003245760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390620003216200046b565b50505b6200033260008383620003fa565b6200035781600462000343620004d8565b620003ff60201b62000c261790919060201c565b8060046200036462000535565b5050506001600160a01b03821660009081526002602052620003909082906040902062000343620004d8565b6001600160a01b03831660009081526002602052604090208190620003b462000535565b5050506001600160a01b03821660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b505050565b600082820183811015620004645760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390620004616200046b565b50505b9392505050565b632a2a7adb598160e01b8152600481016020815285602082015260005b86811015620004a557808601518282016040015260200162000488565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015620003fa576000828201526020016200051c565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206200051c565b828062000590620004d8565b600181600116156101000203166002900490600052602060002090601f016020900481019282620005d057600085620005c862000535565b505062000634565b82601f10620005ee57805160ff19168380011785620005c862000535565b82800160010185620005ff62000535565b5050821562000634579182015b8281111562000634578251826200062262000535565b5050916020019190600101906200060c565b50620006429291506200068d565b5090565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206200051c565b80821115620006425760008082620006a462000535565b5050506001016200068d565b611ab180620006c06000396000f3fe6080604052348015610019576000806100166114f7565b50505b506004361061013f5760003560e01c80633cb747bf116100bb578063a457c2d71161008a578063a9059cbb1161006f578063a9059cbb1461041a578063bdeaf6411461044f578063dd62ed3e146104705761013f565b8063a457c2d7146103dd578063a84ce98c146104125761013f565b80633cb747bf1461034d57806370a08231146103715780638d6e9a5b146103a057806395d89b41146103d55761013f565b8063205c2878116101125780632e1a7d4d116100f75780632e1a7d4d146102d4578063313ce567146102fa57806339509351146103185761013f565b8063205c28781461026057806323b872dd146102955761013f565b806306fdde031461014d578063095ea7b3146101cc57806318160ddd1461021557806319ab453c1461022f575b60008061014a6114f7565b50505b6101556104a7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610191578082015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610201600480360360408110156101eb576000806101e86114f7565b50505b506001600160a01b038135169060200135610564565b604051901515815260200160405180910390f35b61021d610582565b60405190815260200160405180910390f35b61025e6004803603602081101561024e5760008061024b6114f7565b50505b50356001600160a01b0316610593565b005b61025e6004803603604081101561027f5760008061027c6114f7565b50505b506001600160a01b038135169060200135610670565b610201600480360360608110156102b4576000806102b16114f7565b50505b506001600160a01b038135811691602081013590911690604001356106d4565b61025e600480360360208110156102f3576000806102f06114f7565b50505b5035610768565b6103026107d3565b60405160ff909116815260200160405180910390f35b61020160048036036040811015610337576000806103346114f7565b50505b506001600160a01b0381351690602001356107d8565b61035561083d565b6040516001600160a01b03909116815260200160405180910390f35b61021d600480360360208110156103905760008061038d6114f7565b50505b50356001600160a01b031661085b565b61025e600480360360408110156103bf576000806103bc6114f7565b50505b506001600160a01b03813516906020013561087b565b610155610aa3565b610201600480360360408110156103fc576000806103f96114f7565b50505b506001600160a01b038135169060200135610b49565b610355610bbf565b61020160048036036040811015610439576000806104366114f7565b50505b506001600160a01b038135169060200135610bcb565b610457610bdf565b60405163ffffffff909116815260200160405180910390f35b61021d6004803603604081101561048f5760008061048c6114f7565b50505b506001600160a01b0381358116916020013516610be6565b60606005806104b4611562565b600181600116156101000203166002900480601f0160208091040260200160405190810160405281815291906020830182806104ee611562565b6001816001161561010002031660029004801561055a5780601f1061052857610100808361051a611562565b04028352916020019161055a565b820191906000526020600020905b8161053f611562565b8152906001019060200180831161053657829003601f168201915b5050505050905090565b6000610578610571610c8e565b8484610c99565b5060015b92915050565b6000600461058e611562565b905090565b60008060016105a0611562565b906101000a90046001600160a01b03166001600160a01b0316146105e85760405162461bcd60e51b81526004016105d69061187b565b604051809103906105e56114f7565b50505b80600180806105f5611562565b816001600160a01b0302191690836001600160a01b03160217906106176115bd565b5050507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e66001600090610648611562565b906101000a90046001600160a01b03166040516106659190611867565b60405180910390a150565b600080600161067d611562565b906101000a90046001600160a01b03166001600160a01b031614156106c65760405162461bcd60e51b81526004016106b4906118c0565b604051809103906106c36114f7565b50505b6106d08282610dc1565b5050565b60006106e1848484610ecb565b61075e846106ed610c8e565b610759856040516060810160405260288082526119ca60208301396001600160a01b038a166000908152600360205260409020600061072a610c8e565b6001600160a01b03166001600160a01b03168152602001908152602001600020610752611562565b9190611069565b610c99565b5060019392505050565b6000806001610775611562565b906101000a90046001600160a01b03166001600160a01b031614156107be5760405162461bcd60e51b81526004016107ac906118c0565b604051809103906107bb6114f7565b50505b6107d05a6107ca61160b565b82610dc1565b50565b600090565b60006105786107e5610c8e565b8461075985600360006107f6610c8e565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038916600090815260209190915260409020610837611562565b90610c26565b600080610848611562565b906101000a90046001600160a01b031681565b6001600160a01b038116600090815260026020526040812061057c611562565b6000806001610888611562565b906101000a90046001600160a01b03166001600160a01b031614156108d15760405162461bcd60e51b81526004016108bf906118c0565b604051809103906108ce6114f7565b50505b600060016108dd611562565b906101000a90046001600160a01b03166108f5611109565b6001600160a01b03165a61090761160b565b6001600160a01b0316146109555760405162461bcd60e51b815260040180806020018281038252602e81526020018061199c602e9139604001915050604051809103906109526114f7565b50505b806001600160a01b0316610967611109565b6001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381868061099a611651565b1580156109af576000806109ac6114f7565b50505b505a6109b961169d565b50505050501580156109d8573d6000803e3d60006109d56114f7565b50505b505050506040513d60208110156109f7576000806109f46114f7565b50505b8101908080516001600160a01b0316939093149250610a539150505760405162461bcd60e51b8152600401808060200182810382526030815260200180611a136030913960400191505060405180910390610a506114f7565b50505b610a5d838361112a565b826001600160a01b03167f162eb12ad2bd8b6ca7960f162208414ab3bc2da9f37953788ffd8cf850c3492b83604051610a969190611905565b60405180910390a2505050565b6060600680610ab0611562565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280610aea611562565b6001816001161561010002031660029004801561055a5780601f10610b1657610100808361051a611562565b820191906000526020600020905b81610b2d611562565b81529060010190602001808311610b2457509395945050505050565b6000610578610b56610c8e565b8461075985604051606081016040526025808252611a8c602083013960036000610b7e610c8e565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038a16600090815260209190915260409020610752611562565b60006001610848611562565b6000610578610bd8610c8e565b8484610ecb565b620186a090565b6001600160a01b03821660009081526003602052604081206001600160a01b038316600090815260209190915260409020610c1f611562565b9392505050565b600082820183811015610c1f5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390610c856114f7565b50509392505050565b60005a61058e61160b565b6001600160a01b038316610ce75760405162461bcd60e51b8152600401808060200182810382526024815260200180611a686024913960400191505060405180910390610ce46114f7565b50505b6001600160a01b038216610d355760405162461bcd60e51b81526004018080602001828103825260228152602001806119546022913960400191505060405180910390610d326114f7565b50505b6001600160a01b038316600090815260036020528190604090206001600160a01b0384166000908152602091909152604090208190610d726115bd565b505050816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b610dcb8282611134565b60007ff4f7b41a000000000000000000000000000000000000000000000000000000008383604051602401610e0192919061184e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690911790529050610e8860006001610e6a611562565b906101000a90046001600160a01b031682610e83610bdf565b611146565b5a610e9161160b565b6001600160a01b03167fbb2689ff876f7ef453cf8865dde5ab10349d222e2e1383c5152fbdb083f02da28484604051610a9692919061184e565b6001600160a01b038316610f195760405162461bcd60e51b8152600401808060200182810382526025815260200180611a436025913960400191505060405180910390610f166114f7565b50505b6001600160a01b038216610f675760405162461bcd60e51b815260040180806020018281038252602381526020018061190f6023913960400191505060405180910390610f646114f7565b50505b610f72838383611257565b610fad8160405160608101604052602680825261197660208301396001600160a01b0386166000908152600260205260409020610752611562565b6001600160a01b03841660009081526002602052604090208190610fcf6115bd565b5050506001600160a01b03821660009081526002602052610ff890829060409020610837611562565b6001600160a01b0383166000908152600260205260409020819061101a6115bd565b505050816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b600081848411156111015760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110bd5780820151838201526020016110a5565b50505050905090810190601f1680156110ea5780820380516001836020036101000a031916815260200191505b5092505050604051809103906110fe6114f7565b50505b505050900390565b60008080611115611562565b906101000a90046001600160a01b0316905090565b6106d0828261125c565b6106d05a61114061160b565b82611375565b61114e611109565b6001600160a01b0316633dbb202b8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156111c65780820151838201526020016111ae565b50505050905090810190601f1680156111f35780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000878061120f611651565b158015611224576000806112216114f7565b50505b505a61122e611788565b50505050505015801561124e573d6000803e3d600061124b6114f7565b50505b50505050505050565b505050565b6001600160a01b0382166112bf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401604051809103906112bc6114f7565b50505b6112cb60008383611257565b6112d9816004610837611562565b8060046112e46115bd565b5050506001600160a01b0382166000908152600260205261130d90829060409020610837611562565b6001600160a01b0383166000908152600260205260409020819061132f6115bd565b5050506001600160a01b03821660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6001600160a01b0382166113c35760405162461bcd60e51b81526004018080602001828103825260218152602001806119f260219139604001915050604051809103906113c06114f7565b50505b6113cf82600083611257565b61140a8160405160608101604052602280825261193260208301396001600160a01b0385166000908152600260205260409020610752611562565b6001600160a01b0383166000908152600260205260409020819061142c6115bd565b50505061144381600461143d611562565b90611495565b80600461144e6115bd565b5060009150506001600160a01b0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6000828211156114f15760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401604051809103906111016114f7565b50900390565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561152f578086015182820160400152602001611514565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611257576000828201526020016115a6565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206115a6565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206115a6565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206115a6565b638540661f598160e01b81526116ce565b808083111561057c575090919050565b808083101561057c575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156117065780880151828201526020016116ee565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af1505961175b8d3d6116be565b8c0161176781876116ae565b5b8281101561177c5760008152602001611768565b50929c50505050505050565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b898110156117cc5780890151828201526020016117b4565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596118218e3d6116be565b8d0161182d81876116ae565b5b82811015611842576000815260200161182e565b50929d50505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0391909116815260200190565b60208082526025908201527f436f6e74726163742068617320616c7265616479206265656e20696e697469616040820152641b1a5e995960da1b606082015260800190565b60208082526025908201527f436f6e747261637420686173206e6f7420796574206265656e20696e697469616040820152641b1a5e995960da1b606082015260800190565b9081526020019056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654f564d5f58434841494e3a206d657373656e67657220636f6e747261637420756e61757468656e7469636174656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f20616464726573734f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f73732d646f6d61696e206d65737361676545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
  "deployedBytecode": "0x6080604052348015610019576000806100166114f7565b50505b506004361061013f5760003560e01c80633cb747bf116100bb578063a457c2d71161008a578063a9059cbb1161006f578063a9059cbb1461041a578063bdeaf6411461044f578063dd62ed3e146104705761013f565b8063a457c2d7146103dd578063a84ce98c146104125761013f565b80633cb747bf1461034d57806370a08231146103715780638d6e9a5b146103a057806395d89b41146103d55761013f565b8063205c2878116101125780632e1a7d4d116100f75780632e1a7d4d146102d4578063313ce567146102fa57806339509351146103185761013f565b8063205c28781461026057806323b872dd146102955761013f565b806306fdde031461014d578063095ea7b3146101cc57806318160ddd1461021557806319ab453c1461022f575b60008061014a6114f7565b50505b6101556104a7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610191578082015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610201600480360360408110156101eb576000806101e86114f7565b50505b506001600160a01b038135169060200135610564565b604051901515815260200160405180910390f35b61021d610582565b60405190815260200160405180910390f35b61025e6004803603602081101561024e5760008061024b6114f7565b50505b50356001600160a01b0316610593565b005b61025e6004803603604081101561027f5760008061027c6114f7565b50505b506001600160a01b038135169060200135610670565b610201600480360360608110156102b4576000806102b16114f7565b50505b506001600160a01b038135811691602081013590911690604001356106d4565b61025e600480360360208110156102f3576000806102f06114f7565b50505b5035610768565b6103026107d3565b60405160ff909116815260200160405180910390f35b61020160048036036040811015610337576000806103346114f7565b50505b506001600160a01b0381351690602001356107d8565b61035561083d565b6040516001600160a01b03909116815260200160405180910390f35b61021d600480360360208110156103905760008061038d6114f7565b50505b50356001600160a01b031661085b565b61025e600480360360408110156103bf576000806103bc6114f7565b50505b506001600160a01b03813516906020013561087b565b610155610aa3565b610201600480360360408110156103fc576000806103f96114f7565b50505b506001600160a01b038135169060200135610b49565b610355610bbf565b61020160048036036040811015610439576000806104366114f7565b50505b506001600160a01b038135169060200135610bcb565b610457610bdf565b60405163ffffffff909116815260200160405180910390f35b61021d6004803603604081101561048f5760008061048c6114f7565b50505b506001600160a01b0381358116916020013516610be6565b60606005806104b4611562565b600181600116156101000203166002900480601f0160208091040260200160405190810160405281815291906020830182806104ee611562565b6001816001161561010002031660029004801561055a5780601f1061052857610100808361051a611562565b04028352916020019161055a565b820191906000526020600020905b8161053f611562565b8152906001019060200180831161053657829003601f168201915b5050505050905090565b6000610578610571610c8e565b8484610c99565b5060015b92915050565b6000600461058e611562565b905090565b60008060016105a0611562565b906101000a90046001600160a01b03166001600160a01b0316146105e85760405162461bcd60e51b81526004016105d69061187b565b604051809103906105e56114f7565b50505b80600180806105f5611562565b816001600160a01b0302191690836001600160a01b03160217906106176115bd565b5050507f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e66001600090610648611562565b906101000a90046001600160a01b03166040516106659190611867565b60405180910390a150565b600080600161067d611562565b906101000a90046001600160a01b03166001600160a01b031614156106c65760405162461bcd60e51b81526004016106b4906118c0565b604051809103906106c36114f7565b50505b6106d08282610dc1565b5050565b60006106e1848484610ecb565b61075e846106ed610c8e565b610759856040516060810160405260288082526119ca60208301396001600160a01b038a166000908152600360205260409020600061072a610c8e565b6001600160a01b03166001600160a01b03168152602001908152602001600020610752611562565b9190611069565b610c99565b5060019392505050565b6000806001610775611562565b906101000a90046001600160a01b03166001600160a01b031614156107be5760405162461bcd60e51b81526004016107ac906118c0565b604051809103906107bb6114f7565b50505b6107d05a6107ca61160b565b82610dc1565b50565b600090565b60006105786107e5610c8e565b8461075985600360006107f6610c8e565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038916600090815260209190915260409020610837611562565b90610c26565b600080610848611562565b906101000a90046001600160a01b031681565b6001600160a01b038116600090815260026020526040812061057c611562565b6000806001610888611562565b906101000a90046001600160a01b03166001600160a01b031614156108d15760405162461bcd60e51b81526004016108bf906118c0565b604051809103906108ce6114f7565b50505b600060016108dd611562565b906101000a90046001600160a01b03166108f5611109565b6001600160a01b03165a61090761160b565b6001600160a01b0316146109555760405162461bcd60e51b815260040180806020018281038252602e81526020018061199c602e9139604001915050604051809103906109526114f7565b50505b806001600160a01b0316610967611109565b6001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381868061099a611651565b1580156109af576000806109ac6114f7565b50505b505a6109b961169d565b50505050501580156109d8573d6000803e3d60006109d56114f7565b50505b505050506040513d60208110156109f7576000806109f46114f7565b50505b8101908080516001600160a01b0316939093149250610a539150505760405162461bcd60e51b8152600401808060200182810382526030815260200180611a136030913960400191505060405180910390610a506114f7565b50505b610a5d838361112a565b826001600160a01b03167f162eb12ad2bd8b6ca7960f162208414ab3bc2da9f37953788ffd8cf850c3492b83604051610a969190611905565b60405180910390a2505050565b6060600680610ab0611562565b600181600116156101000203166002900480601f016020809104026020016040519081016040528181529190602083018280610aea611562565b6001816001161561010002031660029004801561055a5780601f10610b1657610100808361051a611562565b820191906000526020600020905b81610b2d611562565b81529060010190602001808311610b2457509395945050505050565b6000610578610b56610c8e565b8461075985604051606081016040526025808252611a8c602083013960036000610b7e610c8e565b6001600160a01b03166001600160a01b031681526020019081526020016000206001600160a01b038a16600090815260209190915260409020610752611562565b60006001610848611562565b6000610578610bd8610c8e565b8484610ecb565b620186a090565b6001600160a01b03821660009081526003602052604081206001600160a01b038316600090815260209190915260409020610c1f611562565b9392505050565b600082820183811015610c1f5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640160405180910390610c856114f7565b50509392505050565b60005a61058e61160b565b6001600160a01b038316610ce75760405162461bcd60e51b8152600401808060200182810382526024815260200180611a686024913960400191505060405180910390610ce46114f7565b50505b6001600160a01b038216610d355760405162461bcd60e51b81526004018080602001828103825260228152602001806119546022913960400191505060405180910390610d326114f7565b50505b6001600160a01b038316600090815260036020528190604090206001600160a01b0384166000908152602091909152604090208190610d726115bd565b505050816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405190815260200160405180910390a3505050565b610dcb8282611134565b60007ff4f7b41a000000000000000000000000000000000000000000000000000000008383604051602401610e0192919061184e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690911790529050610e8860006001610e6a611562565b906101000a90046001600160a01b031682610e83610bdf565b611146565b5a610e9161160b565b6001600160a01b03167fbb2689ff876f7ef453cf8865dde5ab10349d222e2e1383c5152fbdb083f02da28484604051610a9692919061184e565b6001600160a01b038316610f195760405162461bcd60e51b8152600401808060200182810382526025815260200180611a436025913960400191505060405180910390610f166114f7565b50505b6001600160a01b038216610f675760405162461bcd60e51b815260040180806020018281038252602381526020018061190f6023913960400191505060405180910390610f646114f7565b50505b610f72838383611257565b610fad8160405160608101604052602680825261197660208301396001600160a01b0386166000908152600260205260409020610752611562565b6001600160a01b03841660009081526002602052604090208190610fcf6115bd565b5050506001600160a01b03821660009081526002602052610ff890829060409020610837611562565b6001600160a01b0383166000908152600260205260409020819061101a6115bd565b505050816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a3505050565b600081848411156111015760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110bd5780820151838201526020016110a5565b50505050905090810190601f1680156110ea5780820380516001836020036101000a031916815260200191505b5092505050604051809103906110fe6114f7565b50505b505050900390565b60008080611115611562565b906101000a90046001600160a01b0316905090565b6106d0828261125c565b6106d05a61114061160b565b82611375565b61114e611109565b6001600160a01b0316633dbb202b8484846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001806020018363ffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156111c65780820151838201526020016111ae565b50505050905090810190601f1680156111f35780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000878061120f611651565b158015611224576000806112216114f7565b50505b505a61122e611788565b50505050505015801561124e573d6000803e3d600061124b6114f7565b50505b50505050505050565b505050565b6001600160a01b0382166112bf5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401604051809103906112bc6114f7565b50505b6112cb60008383611257565b6112d9816004610837611562565b8060046112e46115bd565b5050506001600160a01b0382166000908152600260205261130d90829060409020610837611562565b6001600160a01b0383166000908152600260205260409020819061132f6115bd565b5050506001600160a01b03821660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6001600160a01b0382166113c35760405162461bcd60e51b81526004018080602001828103825260218152602001806119f260219139604001915050604051809103906113c06114f7565b50505b6113cf82600083611257565b61140a8160405160608101604052602280825261193260208301396001600160a01b0385166000908152600260205260409020610752611562565b6001600160a01b0383166000908152600260205260409020819061142c6115bd565b50505061144381600461143d611562565b90611495565b80600461144e6115bd565b5060009150506001600160a01b0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6000828211156114f15760405162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006044820152606401604051809103906111016114f7565b50900390565b632a2a7adb598160e01b8152600481016020815285602082015260005b8681101561152f578086015182820160400152602001611514565b506020828760640184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b505050565b6303daa959598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b8051935060005b6040811015611257576000828201526020016115a6565b6322bd64c0598160e01b8152836004820152846024820152600081604483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b6000815260206115a6565b6373509064598160e01b8152602081600483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206115a6565b638435035b598160e01b8152836004820152602081602483336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b805160008252935060206115a6565b638540661f598160e01b81526116ce565b808083111561057c575090919050565b808083101561057c575090919050565b836004820152846024820152606060448201528660648201526084810160005b888110156117065780880151828201526020016116ee565b506060828960a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8b8b82606087013350600060045af1505961175b8d3d6116be565b8c0161176781876116ae565b5b8281101561177c5760008152602001611768565b50929c50505050505050565b6385979f76598160e01b8152836004820152846024820152606060448201528760648201526084810160005b898110156117cc5780890151828201526020016117b4565b506060828a60a40184336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760016000f35b815160408301513d6000853e8c8c82606087013350600060045af150596118218e3d6116be565b8d0161182d81876116ae565b5b82811015611842576000815260200161182e565b50929d50505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0391909116815260200190565b60208082526025908201527f436f6e74726163742068617320616c7265616479206265656e20696e697469616040820152641b1a5e995960da1b606082015260800190565b60208082526025908201527f436f6e747261637420686173206e6f7420796574206265656e20696e697469616040820152641b1a5e995960da1b606082015260800190565b9081526020019056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654f564d5f58434841494e3a206d657373656e67657220636f6e747261637420756e61757468656e7469636174656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f20616464726573734f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f73732d646f6d61696e206d65737361676545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "finalizeDeposit(address,uint256)": {
        "details": "Complete a deposit from L1 to L2, and credits funds to the recipient's balance of this  L2 token.  This call will fail if it did not originate from a corresponding deposit in OVM_l1TokenGateway. ",
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_to": "Address to receive the withdrawal at"
        }
      },
      "getFinalizeWithdrawalL1Gas()": {
        "details": "Overridable getter for the *L1* gas limit of settling the withdrawal, in the case it may be dynamic, and the above public constant does not suffice."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "init(address)": {
        "details": "Initialize this contract with the L1 token gateway address. The flow: 1) this contract gets deployed on L2, 2) the L1 gateway is deployed with addr from (1), 3) L1 gateway address passed here.",
        "params": {
          "_l1TokenGateway": "Address of the corresponding L1 gateway deployed to the main chain"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "withdraw(uint256)": {
        "details": "initiate a withdraw of some tokens to the caller's account on L1",
        "params": {
          "_amount": "Amount of the token to withdraw"
        }
      },
      "withdrawTo(address,uint256)": {
        "details": "initiate a withdraw of some token to a recipient's account on L1",
        "params": {
          "_amount": "Amount of the token to withdraw",
          "_to": "L1 adress to credit the withdrawal to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Runtime target: OVM",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "messenger",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "l1TokenGateway",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(iOVM_L1TokenGateway)282"
      },
      {
        "astId": 769,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 775,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 777,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 779,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 781,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 783,
        "contract": "contracts/JunkCoinDepositedERC20.sol:JunkCoinDepositedERC20",
        "label": "_decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(iOVM_L1TokenGateway)282": {
        "encoding": "inplace",
        "label": "contract iOVM_L1TokenGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
