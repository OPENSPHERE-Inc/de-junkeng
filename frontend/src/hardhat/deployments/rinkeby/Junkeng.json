{
  "address": "0xaE378F81F8A218C8A442CD43AffAe37B14042486",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Disclosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Earned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "a_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "b",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "b_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Established",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "a_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "a_handShape",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "b",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "b_index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "b_handShape",
          "type": "uint8"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_handShape",
          "type": "uint8"
        }
      ],
      "name": "disclose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getCoinBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coins",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpponentStatus",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "handShape",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "streak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "handShape",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "streak",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "phase",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x196e272f3e938bc3b1fbda85356e0bfff288b0fda3ed5132e7128cbe3aff74d7",
  "receipt": {
    "to": null,
    "from": "0xf1e544ac1C922351ab588545F8a9627DE6Ca16f2",
    "contractAddress": "0xaE378F81F8A218C8A442CD43AffAe37B14042486",
    "transactionIndex": 8,
    "gasUsed": "1386633",
    "logsBloom": "0x
    "blockHash": "0x848c235844fcbe3968a14d3fe87d83e2794906d4b5f5098b9aadabf574d8e345",
    "transactionHash": "0x196e272f3e938bc3b1fbda85356e0bfff288b0fda3ed5132e7128cbe3aff74d7",
    "logs": [],
    "blockNumber": 8262389,
    "cumulativeGasUsed": "3753859",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf25Aded893150faDC14aaDf817471f3C44c325eD"
  ],
  "solcInputHash": "6738b319b3a9a0258551a698a2179972",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Disclosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Earned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Established\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"a_handShape\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"b_handShape\",\"type\":\"uint8\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_handShape\",\"type\":\"uint8\"}],\"name\":\"disclose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getCoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpponentStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"handShape\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"handShape\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"streak\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Disclosed(address,uint256)\":{\"notice\":\"Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)\"},\"Earned(address,uint256,uint256)\":{\"notice\":\"Emit when awarded JunkCoin to winner\"},\"Established(address,uint256,address,uint256,uint256)\":{\"notice\":\"Emit when the match has been established.\"},\"Joined(address,uint256)\":{\"notice\":\"Emit when participant joined.\"},\"Settled(address,uint256,uint8,address,uint256,uint8)\":{\"notice\":\"Emit when each participants disclosed their hand shape.\"},\"Withdrew(address,uint256)\":{\"notice\":\"Emit when withdrew JunkCoin\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor Obtain JunkCoin address from args Obtain admin address from msg.sender\"},\"disclose(uint8)\":{\"notice\":\"Disclose hand shape each other. _handShape: 1 Guu, 2 Choki, 3 Paa\"},\"getCoinBalance(uint256)\":{\"notice\":\"Get own coin balance This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args.\"},\"getOpponentStatus()\":{\"notice\":\"Get opponent status\"},\"getStatus()\":{\"notice\":\"Get own status\"},\"join()\":{\"notice\":\"Join match queue\"},\"withdraw()\":{\"notice\":\"Withdraw JunkCoin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Junkeng.sol\":\"Junkeng\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Junkeng.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract Junkeng {\\r\\n    enum ParticipantStatus {\\r\\n        NoRegistration,\\r\\n        NoParticipating,\\r\\n        Participated\\r\\n    }\\r\\n\\r\\n    enum MatchStatus {\\r\\n        NoParticipating,\\r\\n        Participated,\\r\\n        Disclosed,\\r\\n        Settled\\r\\n    }\\r\\n\\r\\n    enum HandShape {\\r\\n        Undefined,\\r\\n        Guu,\\r\\n        Choki,\\r\\n        Paa\\r\\n    }\\r\\n\\r\\n    struct ParticipantContext {\\r\\n        uint current;  // Current index of queue\\r\\n        ParticipantStatus status;\\r\\n        uint streak;  // Win streak\\r\\n        uint phase;  // Increment every transaction. This helps frontend status transition\\r\\n    }\\r\\n\\r\\n    struct Queue {\\r\\n        address addr;\\r\\n        HandShape handShape;\\r\\n        uint timestamp;  // block.timestamp\\r\\n        MatchStatus status;\\r\\n    }\\r\\n\\r\\n    address private admin;\\r\\n    address private coin;\\r\\n\\r\\n    // Match context\\r\\n    Queue[] private queue;\\r\\n    mapping (address => ParticipantContext) private participants;\\r\\n\\r\\n    // User's asset\\r\\n    mapping (address => uint) private coinStock;\\r\\n\\r\\n    /**\\r\\n     * Emit when participant joined.\\r\\n     */\\r\\n    event Joined(address addr, uint index);\\r\\n\\r\\n    /**\\r\\n     * Emit when the match has been established.\\r\\n     */\\r\\n    event Established(address a, uint a_index, address b, uint b_index, uint timestamp);\\r\\n\\r\\n    /**\\r\\n     * Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)\\r\\n     */\\r\\n    event Disclosed(address addr, uint index);\\r\\n\\r\\n    /**\\r\\n     * Emit when each participants disclosed their hand shape.\\r\\n     */\\r\\n    event Settled(address a, uint a_index, uint8 a_handShape, address b, uint b_index, uint8 b_handShape);\\r\\n\\r\\n    /**\\r\\n     * Emit when awarded JunkCoin to winner\\r\\n     */\\r\\n    event Earned(address addr, uint index, uint amount);\\r\\n\\r\\n    /**\\r\\n     * Emit when withdrew JunkCoin\\r\\n     */\\r\\n    event Withdrew(address addr, uint amount);\\r\\n\\r\\n    /**\\r\\n     * Sender is registered\\r\\n     */\\r\\n    modifier registered() {\\r\\n        require(participants[msg.sender].status > ParticipantStatus.NoRegistration, \\\"No registration\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sender is participant\\r\\n     */\\r\\n    modifier participating() {\\r\\n        require(participants[msg.sender].status > ParticipantStatus.NoParticipating, \\\"Not participants\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sender is non participant\\r\\n     */\\r\\n    modifier notParticipating() {\\r\\n        require(participants[msg.sender].status <= ParticipantStatus.NoParticipating, \\\"Already participated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calc opponent index\\r\\n     */\\r\\n    function calcOpponentIndex(uint _index) pure private returns(uint) {\\r\\n        return (_index & ~uint(1)) + ((_index + 1) & uint(1));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get opponent index\\r\\n     * Require exists\\r\\n     */\\r\\n    function getOpponent(uint _index) view private returns(uint) {\\r\\n        // Even vs Odd\\r\\n        uint opponent = calcOpponentIndex(_index);\\r\\n\\r\\n        require(opponent < queue.length, \\\"Opponent not ready\\\");\\r\\n\\r\\n        return opponent;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get maximum of a and b\\r\\n     */\\r\\n    function bigger(uint _a, uint _b) pure private returns(uint) {\\r\\n        return (_a > _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate duration from latest timestamp\\r\\n     */\\r\\n    function calcDuration(uint _a, uint _b) view private returns(uint) {\\r\\n        return block.timestamp - bigger(_a, _b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Expire at 5 minutes after the match was established.\\r\\n     */\\r\\n    modifier timeout() {\\r\\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\\r\\n            uint index = participants[msg.sender].current;\\r\\n            uint opponent = calcOpponentIndex(index);\\r\\n\\r\\n            if (opponent < queue.length) {\\r\\n                // Keep deadline\\r\\n                uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n                if (duration > 5 minutes) {\\r\\n                    // Timeout -> Reset\\r\\n                    participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n\\r\\n                    if (queue[index].handShape != HandShape.Undefined && queue[opponent].handShape == HandShape.Undefined) {\\r\\n                        // Opponent timeout -> DEFWIN\\r\\n                        // Get coin\\r\\n                        coinStock[msg.sender] += ++participants[msg.sender].streak;\\r\\n\\r\\n                        emit Earned(msg.sender, index, participants[msg.sender].streak);\\r\\n                    } else {\\r\\n                        // Self timeout or both timeout -> DEFLOSS\\r\\n                        participants[msg.sender].streak = 0;\\r\\n                    }\\r\\n\\r\\n                    queue[index].status = MatchStatus.Settled;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Some coins have been stocked\\r\\n     */\\r\\n    modifier haveCoins() {\\r\\n        require(coinStock[msg.sender] > 0, \\\"No coins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Advance phase value after the transaction process\\r\\n     */\\r\\n    modifier phaseAdvance() {\\r\\n        _;\\r\\n        participants[msg.sender].phase++;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Settle match result\\r\\n     * result: 0 draw, 1 win, -1 lose\\r\\n     */\\r\\n    function settle(uint _index, uint _opponent) view private returns(int8) {\\r\\n        // FIXME: Constants of non-value type not yet implemented on solidity 0.7.x\\r\\n        int8[4][4] memory lookupTable = [\\r\\n            [int8(0), int8(-1), int8(-1), int8(-1)],\\r\\n            [int8(1), int8( 0), int8( 1), int8(-1)],\\r\\n            [int8(1), int8(-1), int8( 0), int8( 1)],\\r\\n            [int8(1), int8( 1), int8(-1), int8( 0)]\\r\\n        ];\\r\\n        return lookupTable[uint8(queue[_index].handShape)][uint8(queue[_opponent].handShape)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Constructor\\r\\n     * Obtain JunkCoin address from args\\r\\n     * Obtain admin address from msg.sender\\r\\n     */\\r\\n    constructor(address _coin) {\\r\\n        coin = _coin;\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Join match queue\\r\\n     */\\r\\n    function join() public timeout notParticipating phaseAdvance {\\r\\n        uint index = queue.length;\\r\\n\\r\\n        queue.push(Queue({\\r\\n            addr: msg.sender,\\r\\n            handShape: HandShape.Undefined,\\r\\n            timestamp: block.timestamp,\\r\\n            status: MatchStatus.Participated\\r\\n        }));\\r\\n\\r\\n        if (participants[msg.sender].status == ParticipantStatus.NoRegistration) {\\r\\n            // New registration\\r\\n            participants[msg.sender] = ParticipantContext({\\r\\n                current: index,\\r\\n                status: ParticipantStatus.Participated,\\r\\n                streak: 0,\\r\\n                phase: 0\\r\\n            });\\r\\n        } else {\\r\\n            // Continuous\\r\\n            participants[msg.sender].current = index;\\r\\n            participants[msg.sender].status = ParticipantStatus.Participated;\\r\\n        }\\r\\n\\r\\n        emit Joined(msg.sender, index);\\r\\n\\r\\n        if (index % 2 == 1) {\\r\\n            // Establish match when index is odd.\\r\\n            uint timestamp = bigger(queue[index - 1].timestamp, queue[index].timestamp);\\r\\n            emit Established(queue[index - 1].addr, index - 1, queue[index].addr, index, timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Disclose hand shape each other.\\r\\n     * _handShape: 1 Guu, 2 Choki, 3 Paa\\r\\n     */\\r\\n    function disclose(uint8 _handShape) public participating phaseAdvance {\\r\\n        uint index = participants[msg.sender].current;\\r\\n        uint opponent = getOpponent(index);\\r\\n        address opponentAddr = queue[opponent].addr;\\r\\n\\r\\n        require(queue[index].status == MatchStatus.Participated, \\\"Already disclosed\\\" );\\r\\n        require(_handShape >= 1 && _handShape <= 3, \\\"Invalid hand shape\\\");\\r\\n\\r\\n        // Keep deadline\\r\\n        uint duration = calcDuration(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n        if (duration > 5 minutes) {\\r\\n            // Timeout -> Lost or Draw(if opponent timeout too)\\r\\n            queue[index].handShape = HandShape.Undefined;\\r\\n        } else {\\r\\n            queue[index].handShape = HandShape(_handShape);\\r\\n        }\\r\\n\\r\\n        queue[index].status = MatchStatus.Disclosed;\\r\\n        emit Disclosed(msg.sender, index);\\r\\n\\r\\n        if (queue[opponent].status == MatchStatus.Disclosed) {\\r\\n            emit Settled(\\r\\n                msg.sender,\\r\\n                index,\\r\\n                uint8(queue[index].handShape),\\r\\n                opponentAddr,\\r\\n                opponent,\\r\\n                uint8(queue[opponent].handShape)\\r\\n            );\\r\\n\\r\\n            // Settlement\\r\\n            int8 result = settle(index, opponent);\\r\\n\\r\\n            if (result == 1) {\\r\\n                // Won -> Get coin\\r\\n                coinStock[msg.sender] += ++participants[msg.sender].streak;\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                // Reset opponent status for next join\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                participants[opponentAddr].streak = 0;\\r\\n\\r\\n                emit Earned(msg.sender, index, participants[msg.sender].streak);\\r\\n\\r\\n            } else if (result == -1) {\\r\\n                // Lost -> The coin is taken by opponent\\r\\n                coinStock[opponentAddr] += ++participants[opponentAddr].streak;\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                // Reset own status for next join\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                participants[msg.sender].streak = 0;\\r\\n\\r\\n                emit Earned(opponentAddr, opponent, participants[opponentAddr].streak);\\r\\n\\r\\n            } else {\\r\\n                // Draw -> No one get coin\\r\\n                // Reset both status for next join\\r\\n                participants[msg.sender].status = ParticipantStatus.NoParticipating;\\r\\n                participants[msg.sender].streak = 0;\\r\\n                participants[opponentAddr].status = ParticipantStatus.NoParticipating;\\r\\n                participants[opponentAddr].streak = 0;\\r\\n            }\\r\\n\\r\\n            queue[index].status = MatchStatus.Settled;\\r\\n            queue[opponent].status = MatchStatus.Settled;\\r\\n            participants[opponentAddr].phase++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraw JunkCoin\\r\\n     */\\r\\n    function withdraw() public timeout haveCoins phaseAdvance {\\r\\n        uint amount = coinStock[msg.sender];\\r\\n        coinStock[msg.sender] = 0;\\r\\n        IERC20(coin).transferFrom(admin, msg.sender, amount);\\r\\n\\r\\n        emit Withdrew(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get own status\\r\\n     */\\r\\n    function getStatus() view public registered\\r\\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\\r\\n    {\\r\\n        addr = msg.sender;\\r\\n        index = participants[msg.sender].current;\\r\\n        status = uint8(queue[index].status);\\r\\n        timestamp = queue[index].timestamp;\\r\\n        handShape = uint8(queue[index].handShape);\\r\\n        streak = participants[msg.sender].streak;\\r\\n        phase = participants[msg.sender].phase;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get own coin balance\\r\\n     * This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args.\\r\\n     */\\r\\n    function getCoinBalance(uint timestamp) view public returns(uint coins) {\\r\\n        if (participants[msg.sender].status == ParticipantStatus.Participated) {\\r\\n            // Keep deadline\\r\\n            uint index = participants[msg.sender].current;\\r\\n\\r\\n            if (queue[index].status == MatchStatus.Disclosed) {\\r\\n                // No settled yet\\r\\n                uint opponent = getOpponent(index);\\r\\n                uint duration = timestamp - bigger(queue[index].timestamp, queue[opponent].timestamp);\\r\\n\\r\\n                if (duration > 5 minutes &&\\r\\n                    queue[index].handShape != HandShape.Undefined &&\\r\\n                    queue[opponent].handShape == HandShape.Undefined)\\r\\n                {\\r\\n                    // DEFWIN previous match, add (streak + 1) coins to balance\\r\\n                    coins += participants[msg.sender].streak + 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        coins += coinStock[msg.sender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get opponent status\\r\\n     */\\r\\n    function getOpponentStatus() view public registered\\r\\n        returns(address addr, uint index, uint8 status, uint timestamp, uint8 handShape, uint streak, uint phase)\\r\\n    {\\r\\n        uint  self = participants[msg.sender].current;\\r\\n\\r\\n        index = getOpponent(self);\\r\\n        addr = queue[index].addr;\\r\\n        status = uint8(queue[index].status);\\r\\n        timestamp = queue[index].timestamp;\\r\\n        streak = participants[queue[index].addr].streak;\\r\\n        phase = participants[queue[index].addr].phase;\\r\\n\\r\\n        // You can obtain opponent hand shape when disclosed own hand shape\\r\\n        handShape = uint8((queue[self].status >= MatchStatus.Disclosed) ? queue[index].handShape : HandShape.Undefined);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38ac80de0ce5ef718e404091eaa047997dd436433d050726683a11ad95e3ffec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063b48b557011610050578063b48b557014610101578063b688a36314610109578063e4df85201461011157610072565b80633ccfd60b146100775780634e69d560146100815780638fca6874146100d2575b600080fd5b61007f610131565b005b6100896104b2565b604080516001600160a01b039098168852602088019690965260ff9485168787015260608701939093529216608085015260a084019190915260c0830152519081900360e00190f35b6100ef600480360360208110156100e857600080fd5b50356105f7565b60408051918252519081900360200190f35b61008961077c565b61007f610989565b61007f6004803603602081101561012757600080fd5b503560ff16610ed7565b60023360009081526003602052604090206001015460ff16600281111561015457fe5b141561033d57336000908152600360205260408120549061017482611557565b60025490915081101561033a5760006101c96002848154811061019357fe5b906000526020600020906003020160010154600284815481106101b257fe5b906000526020600020906003020160010154611568565b905061012c811115610338573360009081526003602052604081206001908101805460ff19169091179055600280548590811061020257fe5b6000918252602090912060039182020154600160a01b900460ff169081111561022757fe5b14158015610266575060006002838154811061023f57fe5b6000918252602090912060039182020154600160a01b900460ff169081111561026457fe5b145b156102e357336000818152600360208181526040808420600201805460018082018355600485529583902080549091019095019094559181529154815193845291830186905282810191909152517f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed789181900360600190a16102f7565b336000908152600360205260408120600201555b60036002848154811061030657fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561033257fe5b02179055505b505b50505b3360009081526004602052604090205461039e576040805162461bcd60e51b815260206004820152600860248201527f4e6f20636f696e73000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b336000818152600460208181526040808420805490859055600154855483517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b039182169681019690965260248601979097526044850182905291519095909116936323b872dd936064808201949392918390030190829087803b15801561042e57600080fd5b505af1158015610442573d6000803e3d6000fd5b505050506040513d602081101561045857600080fd5b5050604080513381526020810183905281517fb244b9a17ad633c6e83b7983ee04320484956a68ddbe96a0b70dfca1cf19d723929181900390910190a1503360009081526003602081905260409091200180546001019055565b6000808080808080803360009081526003602052604090206001015460ff1660028111156104dc57fe5b1161052e576040805162461bcd60e51b815260206004820152600f60248201527f4e6f20726567697374726174696f6e0000000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460028054929950909750908790811061055357fe5b600091825260209091206003918202016002015460ff169081111561057457fe5b94506002868154811061058357fe5b9060005260206000209060030201600101549350600286815481106105a457fe5b6000918252602090912060039182020154600160a01b900460ff16908111156105c957fe5b3360009081526003602081905260409091206002810154910154989997989697959691959094509092509050565b600060023360009081526003602052604090206001015460ff16600281111561061c57fe5b14156107665733600090815260036020526040902054600280828154811061064057fe5b600091825260209091206003918202016002015460ff169081111561066157fe5b14156107645760006106728261157d565b905060006106bc6002848154811061068657fe5b906000526020600020906003020160010154600284815481106106a557fe5b9060005260206000209060030201600101546115e8565b8503905061012c8111801561070357506000600284815481106106db57fe5b6000918252602090912060039182020154600160a01b900460ff169081111561070057fe5b14155b8015610740575060006002838154811061071957fe5b6000918252602090912060039182020154600160a01b900460ff169081111561073e57fe5b145b15610761573360009081526003602052604090206002015493909301600101925b50505b505b3360009081526004602052604090205401919050565b6000808080808080803360009081526003602052604090206001015460ff1660028111156107a657fe5b116107f8576040805162461bcd60e51b815260206004820152600f60248201527f4e6f20726567697374726174696f6e0000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600360205260409020546108118161157d565b96506002878154811061082057fe5b6000918252602090912060039091020154600280546001600160a01b039092169950908890811061084d57fe5b600091825260209091206003918202016002015460ff169081111561086e57fe5b95506002878154811061087d57fe5b906000526020600020906003020160010154945060036000600289815481106108a257fe5b60009182526020808320600392830201546001600160a01b031684528301939093526040909101812060029081015481549096508a9081106108e057fe5b60009182526020808320600392830201546001600160a01b031684528301939093526040909101902001549150600280828154811061091b57fe5b600091825260209091206003918202016002015460ff169081111561093c57fe5b1015610949576000610972565b6002878154811061095657fe5b6000918252602090912060039091020154600160a01b900460ff165b600381111561097d57fe5b93505090919293949596565b60023360009081526003602052604090206001015460ff1660028111156109ac57fe5b1415610b5f5733600090815260036020526040812054906109cc82611557565b600254909150811015610b5c5760006109eb6002848154811061019357fe5b905061012c811115610b5a573360009081526003602052604081206001908101805460ff191690911790556002805485908110610a2457fe5b6000918252602090912060039182020154600160a01b900460ff1690811115610a4957fe5b14158015610a885750600060028381548110610a6157fe5b6000918252602090912060039182020154600160a01b900460ff1690811115610a8657fe5b145b15610b0557336000818152600360208181526040808420600201805460018082018355600485529583902080549091019095019094559181529154815193845291830186905282810191909152517f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed789181900360600190a1610b19565b336000908152600360205260408120600201555b600360028481548110610b2857fe5b906000526020600020906003020160020160006101000a81548160ff02191690836003811115610b5457fe5b02179055505b505b50505b60013360009081526003602052604090206001015460ff166002811115610b8257fe5b1115610bd5576040805162461bcd60e51b815260206004820152601460248201527f416c726561647920706172746963697061746564000000000000000000000000604482015290519081900360640190fd5b600280546040805160808101825233815260006020820181815242938301939093526001606083018190528401855593909352825160038084027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b039093167fffffffffffffffffffffffff0000000000000000000000000000000000000000909316929092178083559251939493919283917fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff90911690600160a01b908490811115610ca857fe5b02179055506040820151816001015560608201518160020160006101000a81548160ff02191690836003811115610cdb57fe5b021790555060009150610ceb9050565b3360009081526003602052604090206001015460ff166002811115610d0c57fe5b1415610d88576040805160808101909152818152602081016002815260006020808301829052604092830182905233825260038152919020825181559082015160018083018054909160ff1990911690836002811115610d6857fe5b021790555060408201516002820155606090910151600390910155610da9565b336000908152600360205260409020818155600101805460ff191660021790555b604080513381526020810183905281517f49f8fa5eee2e3f21251c2e968640dcaef35cb9332429eb059bb3cd56ddc2533d929181900390910190a16002810660011415610eba576000610e056002600184038154811061068657fe5b90507fd599fddddd6f19ebc013f20b5a43b042ee5964d209a964274fab8977eb819c0860026001840381548110610e3857fe5b906000526020600020906003020160000160009054906101000a90046001600160a01b03166001840360028581548110610e6e57fe5b600091825260209182902060039091020154604080516001600160a01b0395861681529283019390935292909216828201526060820185905260808201849052519081900360a00190a1505b503360009081526003602081905260409091200180546001019055565b60013360009081526003602052604090206001015460ff166002811115610efa57fe5b11610f4c576040805162461bcd60e51b815260206004820152601060248201527f4e6f74207061727469636970616e747300000000000000000000000000000000604482015290519081900360640190fd5b3360009081526003602052604081205490610f668261157d565b9050600060028281548110610f7757fe5b60009182526020909120600390910201546001600160a01b03169050600160028481548110610fa257fe5b600091825260209091206003918202016002015460ff1690811115610fc357fe5b14611015576040805162461bcd60e51b815260206004820152601160248201527f416c726561647920646973636c6f736564000000000000000000000000000000604482015290519081900360640190fd5b60018460ff161015801561102d575060038460ff1611155b61107e576040805162461bcd60e51b815260206004820152601260248201527f496e76616c69642068616e642073686170650000000000000000000000000000604482015290519081900360640190fd5b60006110af6002858154811061109057fe5b906000526020600020906003020160010154600285815481106101b257fe5b905061012c811115611100576000600285815481106110ca57fe5b906000526020600020906003020160000160146101000a81548160ff021916908360038111156110f657fe5b021790555061114e565b8460ff16600381111561110f57fe5b6002858154811061111c57fe5b906000526020600020906003020160000160146101000a81548160ff0219169083600381111561114857fe5b02179055505b600280858154811061115c57fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561118857fe5b0217905550604080513381526020810186905281517f23a6200ad6fe186c45badcd285c34c438705aeb48f037b18133d21df2544ff76929181900390910190a160028084815481106111d657fe5b600091825260209091206003918202016002015460ff16908111156111f757fe5b1415611536577f13e26580722ac6f5336050b3e9fcd2db95f9313d74b4c00ceaf1017e0e159cec33856002878154811061122d57fe5b6000918252602090912060039182020154600160a01b900460ff169081111561125257fe5b85876002898154811061126157fe5b6000918252602090912060039182020154600160a01b900460ff169081111561128657fe5b604080516001600160a01b039788168152602081019690965260ff948516868201529290951660608501526080840152921660a082015290519081900360c00190a160006112d48585611600565b90508060000b6001141561138e5733600081815260036020818152604080842060028082018054600180820183556004875285892080549092018101909155958552918501805460ff1990811687179091556001600160a01b038b1687528387208087018054909216909617905593909301849055928490529054825193845290830188905282820152517f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed789181900360600190a1611491565b8060000b6000191415611447576001600160a01b038316600081815260036020818152604080842060028082018054600180820183556004875285892080549092018101909155958552918501805460ff1990811687179091553387528387208087018054909216909617905593909301849055928490529054825193845290830187905282820152517f6876fda64f1c65c9d3f597e85b191207e3b78c313b6797570007d3e8a08eed789181900360600190a1611491565b336000908152600360205260408082206001808201805460ff19908116831790915560029283018590556001600160a01b0388168552928420808201805490941690911790925501555b6003600286815481106114a057fe5b906000526020600020906003020160020160006101000a81548160ff021916908360038111156114cc57fe5b02179055506003600285815481106114e057fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561150c57fe5b0217905550506001600160a01b038216600090815260036020819052604090912001805460010190555b50503360009081526003602081905260409091200180546001019055505050565b600119811660018281011601919050565b600061157483836115e8565b42039392505050565b60008061158983611557565b60025490915081106115e2576040805162461bcd60e51b815260206004820152601260248201527f4f70706f6e656e74206e6f742072656164790000000000000000000000000000604482015290519081900360640190fd5b92915050565b60008183116115f757816115f9565b825b9392505050565b60408051610100810182526000608080830182815260001960a0850181905260c0850181905260e085018190529084528451808301865260018082526020828101869052828801829052606080840185905281880193909352875180860189528281528082018590528089018790528084018390528789015287519485018852818552840152948201528084018290529282019290925260028054829190869081106116a857fe5b6000918252602090912060039182020154600160a01b900460ff16908111156116cd57fe5b60ff16600481106116da57fe5b6020020151600284815481106116ec57fe5b6000918252602090912060039182020154600160a01b900460ff169081111561171157fe5b60ff166004811061171e57fe5b602002015194935050505056fea2646970667358221220c42fd92f41fea1369a3ee5ddfa2784b53f62ed43405b30520b0efb337584bf0b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "Disclosed(address,uint256)": {
        "notice": "Emit when hand shape has been disclosed. (It cannot obtain hand shape value!)"
      },
      "Earned(address,uint256,uint256)": {
        "notice": "Emit when awarded JunkCoin to winner"
      },
      "Established(address,uint256,address,uint256,uint256)": {
        "notice": "Emit when the match has been established."
      },
      "Joined(address,uint256)": {
        "notice": "Emit when participant joined."
      },
      "Settled(address,uint256,uint8,address,uint256,uint8)": {
        "notice": "Emit when each participants disclosed their hand shape."
      },
      "Withdrew(address,uint256)": {
        "notice": "Emit when withdrew JunkCoin"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor Obtain JunkCoin address from args Obtain admin address from msg.sender"
      },
      "disclose(uint8)": {
        "notice": "Disclose hand shape each other. _handShape: 1 Guu, 2 Choki, 3 Paa"
      },
      "getCoinBalance(uint256)": {
        "notice": "Get own coin balance This is view function so `block.timestamp` isn't update. Obtain actual timestamp from args."
      },
      "getOpponentStatus()": {
        "notice": "Get opponent status"
      },
      "getStatus()": {
        "notice": "Get own status"
      },
      "join()": {
        "notice": "Join match queue"
      },
      "withdraw()": {
        "notice": "Withdraw JunkCoin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1027,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1029,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "coin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1032,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Queue)1025_storage)dyn_storage"
      },
      {
        "astId": 1036,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "participants",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ParticipantContext)1016_storage)"
      },
      {
        "astId": 1040,
        "contract": "contracts/Junkeng.sol:Junkeng",
        "label": "coinStock",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Queue)1025_storage)dyn_storage": {
        "base": "t_struct(Queue)1025_storage",
        "encoding": "dynamic_array",
        "label": "struct Junkeng.Queue[]",
        "numberOfBytes": "32"
      },
      "t_enum(HandShape)1007": {
        "encoding": "inplace",
        "label": "enum Junkeng.HandShape",
        "numberOfBytes": "1"
      },
      "t_enum(MatchStatus)1002": {
        "encoding": "inplace",
        "label": "enum Junkeng.MatchStatus",
        "numberOfBytes": "1"
      },
      "t_enum(ParticipantStatus)997": {
        "encoding": "inplace",
        "label": "enum Junkeng.ParticipantStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ParticipantContext)1016_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Junkeng.ParticipantContext)",
        "numberOfBytes": "32",
        "value": "t_struct(ParticipantContext)1016_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ParticipantContext)1016_storage": {
        "encoding": "inplace",
        "label": "struct Junkeng.ParticipantContext",
        "members": [
          {
            "astId": 1009,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1011,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(ParticipantStatus)997"
          },
          {
            "astId": 1013,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "streak",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1015,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "phase",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Queue)1025_storage": {
        "encoding": "inplace",
        "label": "struct Junkeng.Queue",
        "members": [
          {
            "astId": 1018,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1020,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "handShape",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(HandShape)1007"
          },
          {
            "astId": 1022,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1024,
            "contract": "contracts/Junkeng.sol:Junkeng",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(MatchStatus)1002"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}